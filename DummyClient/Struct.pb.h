// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class D3DVECTOR;
struct D3DVECTORDefaultTypeInternal;
extern D3DVECTORDefaultTypeInternal _D3DVECTOR_default_instance_;
class Object_Pos;
struct Object_PosDefaultTypeInternal;
extern Object_PosDefaultTypeInternal _Object_Pos_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::D3DVECTOR* Arena::CreateMaybeMessage<::Protocol::D3DVECTOR>(Arena*);
template<> ::Protocol::Object_Pos* Arena::CreateMaybeMessage<::Protocol::Object_Pos>(Arena*);
template<> ::Protocol::Player* Arena::CreateMaybeMessage<::Protocol::Player>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit constexpr Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return new Player();
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kPlayerTypeFieldNumber = 3,
    kLevelFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .Protocol.PlayerType playerType = 3;
  void clear_playertype();
  ::Protocol::PlayerType playertype() const;
  void set_playertype(::Protocol::PlayerType value);
  private:
  ::Protocol::PlayerType _internal_playertype() const;
  void _internal_set_playertype(::Protocol::PlayerType value);
  public:

  // uint32 level = 4;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  int playertype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class D3DVECTOR final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.D3DVECTOR) */ {
 public:
  inline D3DVECTOR() : D3DVECTOR(nullptr) {}
  ~D3DVECTOR() override;
  explicit constexpr D3DVECTOR(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  D3DVECTOR(const D3DVECTOR& from);
  D3DVECTOR(D3DVECTOR&& from) noexcept
    : D3DVECTOR() {
    *this = ::std::move(from);
  }

  inline D3DVECTOR& operator=(const D3DVECTOR& from) {
    CopyFrom(from);
    return *this;
  }
  inline D3DVECTOR& operator=(D3DVECTOR&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const D3DVECTOR& default_instance() {
    return *internal_default_instance();
  }
  static inline const D3DVECTOR* internal_default_instance() {
    return reinterpret_cast<const D3DVECTOR*>(
               &_D3DVECTOR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(D3DVECTOR& a, D3DVECTOR& b) {
    a.Swap(&b);
  }
  inline void Swap(D3DVECTOR* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(D3DVECTOR* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline D3DVECTOR* New() const final {
    return new D3DVECTOR();
  }

  D3DVECTOR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<D3DVECTOR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const D3DVECTOR& from);
  void MergeFrom(const D3DVECTOR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(D3DVECTOR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.D3DVECTOR";
  }
  protected:
  explicit D3DVECTOR(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.D3DVECTOR)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Object_Pos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Object_Pos) */ {
 public:
  inline Object_Pos() : Object_Pos(nullptr) {}
  ~Object_Pos() override;
  explicit constexpr Object_Pos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Object_Pos(const Object_Pos& from);
  Object_Pos(Object_Pos&& from) noexcept
    : Object_Pos() {
    *this = ::std::move(from);
  }

  inline Object_Pos& operator=(const Object_Pos& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object_Pos& operator=(Object_Pos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Object_Pos& default_instance() {
    return *internal_default_instance();
  }
  static inline const Object_Pos* internal_default_instance() {
    return reinterpret_cast<const Object_Pos*>(
               &_Object_Pos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Object_Pos& a, Object_Pos& b) {
    a.Swap(&b);
  }
  inline void Swap(Object_Pos* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object_Pos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object_Pos* New() const final {
    return new Object_Pos();
  }

  Object_Pos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object_Pos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Object_Pos& from);
  void MergeFrom(const Object_Pos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object_Pos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Object_Pos";
  }
  protected:
  explicit Object_Pos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVPosFieldNumber = 2,
    kIdFieldNumber = 1,
    kZoneIDFieldNumber = 3,
    kSecIDFieldNumber = 4,
    kObjectTypeFieldNumber = 5,
  };
  // .Protocol.D3DVECTOR vPos = 2;
  bool has_vpos() const;
  private:
  bool _internal_has_vpos() const;
  public:
  void clear_vpos();
  const ::Protocol::D3DVECTOR& vpos() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::D3DVECTOR* release_vpos();
  ::Protocol::D3DVECTOR* mutable_vpos();
  void set_allocated_vpos(::Protocol::D3DVECTOR* vpos);
  private:
  const ::Protocol::D3DVECTOR& _internal_vpos() const;
  ::Protocol::D3DVECTOR* _internal_mutable_vpos();
  public:
  void unsafe_arena_set_allocated_vpos(
      ::Protocol::D3DVECTOR* vpos);
  ::Protocol::D3DVECTOR* unsafe_arena_release_vpos();

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 zoneID = 3;
  void clear_zoneid();
  ::PROTOBUF_NAMESPACE_ID::uint32 zoneid() const;
  void set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_zoneid() const;
  void _internal_set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 secID = 4;
  void clear_secid();
  ::PROTOBUF_NAMESPACE_ID::uint32 secid() const;
  void set_secid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_secid() const;
  void _internal_set_secid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ObjectType = 5;
  void clear_objecttype();
  ::PROTOBUF_NAMESPACE_ID::uint32 objecttype() const;
  void set_objecttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_objecttype() const;
  void _internal_set_objecttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Object_Pos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::D3DVECTOR* vpos_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 zoneid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 secid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 objecttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Player

// uint64 id = 1;
inline void Player::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Player::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Player::id() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.id)
  return _internal_id();
}
inline void Player::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Player::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.id)
}

// string name = 2;
inline void Player::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Player::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.Player.name)
}
inline std::string* Player::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.Player.name)
  return _internal_mutable_name();
}
inline const std::string& Player::_internal_name() const {
  return name_.Get();
}
inline void Player::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Player::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.Player.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Player::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.Player.name)
}

// .Protocol.PlayerType playerType = 3;
inline void Player::clear_playertype() {
  playertype_ = 0;
}
inline ::Protocol::PlayerType Player::_internal_playertype() const {
  return static_cast< ::Protocol::PlayerType >(playertype_);
}
inline ::Protocol::PlayerType Player::playertype() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.playerType)
  return _internal_playertype();
}
inline void Player::_internal_set_playertype(::Protocol::PlayerType value) {
  
  playertype_ = value;
}
inline void Player::set_playertype(::Protocol::PlayerType value) {
  _internal_set_playertype(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.playerType)
}

// uint32 level = 4;
inline void Player::clear_level() {
  level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Player::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Player::level() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.level)
  return _internal_level();
}
inline void Player::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  level_ = value;
}
inline void Player::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.level)
}

// -------------------------------------------------------------------

// D3DVECTOR

// float x = 1;
inline void D3DVECTOR::clear_x() {
  x_ = 0;
}
inline float D3DVECTOR::_internal_x() const {
  return x_;
}
inline float D3DVECTOR::x() const {
  // @@protoc_insertion_point(field_get:Protocol.D3DVECTOR.x)
  return _internal_x();
}
inline void D3DVECTOR::_internal_set_x(float value) {
  
  x_ = value;
}
inline void D3DVECTOR::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.D3DVECTOR.x)
}

// float y = 2;
inline void D3DVECTOR::clear_y() {
  y_ = 0;
}
inline float D3DVECTOR::_internal_y() const {
  return y_;
}
inline float D3DVECTOR::y() const {
  // @@protoc_insertion_point(field_get:Protocol.D3DVECTOR.y)
  return _internal_y();
}
inline void D3DVECTOR::_internal_set_y(float value) {
  
  y_ = value;
}
inline void D3DVECTOR::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.D3DVECTOR.y)
}

// float z = 3;
inline void D3DVECTOR::clear_z() {
  z_ = 0;
}
inline float D3DVECTOR::_internal_z() const {
  return z_;
}
inline float D3DVECTOR::z() const {
  // @@protoc_insertion_point(field_get:Protocol.D3DVECTOR.z)
  return _internal_z();
}
inline void D3DVECTOR::_internal_set_z(float value) {
  
  z_ = value;
}
inline void D3DVECTOR::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.D3DVECTOR.z)
}

// -------------------------------------------------------------------

// Object_Pos

// uint64 id = 1;
inline void Object_Pos::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Object_Pos::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Object_Pos::id() const {
  // @@protoc_insertion_point(field_get:Protocol.Object_Pos.id)
  return _internal_id();
}
inline void Object_Pos::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Object_Pos::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.Object_Pos.id)
}

// .Protocol.D3DVECTOR vPos = 2;
inline bool Object_Pos::_internal_has_vpos() const {
  return this != internal_default_instance() && vpos_ != nullptr;
}
inline bool Object_Pos::has_vpos() const {
  return _internal_has_vpos();
}
inline void Object_Pos::clear_vpos() {
  if (GetArenaForAllocation() == nullptr && vpos_ != nullptr) {
    delete vpos_;
  }
  vpos_ = nullptr;
}
inline const ::Protocol::D3DVECTOR& Object_Pos::_internal_vpos() const {
  const ::Protocol::D3DVECTOR* p = vpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::D3DVECTOR&>(
      ::Protocol::_D3DVECTOR_default_instance_);
}
inline const ::Protocol::D3DVECTOR& Object_Pos::vpos() const {
  // @@protoc_insertion_point(field_get:Protocol.Object_Pos.vPos)
  return _internal_vpos();
}
inline void Object_Pos::unsafe_arena_set_allocated_vpos(
    ::Protocol::D3DVECTOR* vpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vpos_);
  }
  vpos_ = vpos;
  if (vpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.Object_Pos.vPos)
}
inline ::Protocol::D3DVECTOR* Object_Pos::release_vpos() {
  
  ::Protocol::D3DVECTOR* temp = vpos_;
  vpos_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::D3DVECTOR* Object_Pos::unsafe_arena_release_vpos() {
  // @@protoc_insertion_point(field_release:Protocol.Object_Pos.vPos)
  
  ::Protocol::D3DVECTOR* temp = vpos_;
  vpos_ = nullptr;
  return temp;
}
inline ::Protocol::D3DVECTOR* Object_Pos::_internal_mutable_vpos() {
  
  if (vpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::D3DVECTOR>(GetArenaForAllocation());
    vpos_ = p;
  }
  return vpos_;
}
inline ::Protocol::D3DVECTOR* Object_Pos::mutable_vpos() {
  // @@protoc_insertion_point(field_mutable:Protocol.Object_Pos.vPos)
  return _internal_mutable_vpos();
}
inline void Object_Pos::set_allocated_vpos(::Protocol::D3DVECTOR* vpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete vpos_;
  }
  if (vpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::D3DVECTOR>::GetOwningArena(vpos);
    if (message_arena != submessage_arena) {
      vpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vpos, submessage_arena);
    }
    
  } else {
    
  }
  vpos_ = vpos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.Object_Pos.vPos)
}

// uint32 zoneID = 3;
inline void Object_Pos::clear_zoneid() {
  zoneid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Object_Pos::_internal_zoneid() const {
  return zoneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Object_Pos::zoneid() const {
  // @@protoc_insertion_point(field_get:Protocol.Object_Pos.zoneID)
  return _internal_zoneid();
}
inline void Object_Pos::_internal_set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  zoneid_ = value;
}
inline void Object_Pos::set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_zoneid(value);
  // @@protoc_insertion_point(field_set:Protocol.Object_Pos.zoneID)
}

// uint32 secID = 4;
inline void Object_Pos::clear_secid() {
  secid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Object_Pos::_internal_secid() const {
  return secid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Object_Pos::secid() const {
  // @@protoc_insertion_point(field_get:Protocol.Object_Pos.secID)
  return _internal_secid();
}
inline void Object_Pos::_internal_set_secid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  secid_ = value;
}
inline void Object_Pos::set_secid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_secid(value);
  // @@protoc_insertion_point(field_set:Protocol.Object_Pos.secID)
}

// uint32 ObjectType = 5;
inline void Object_Pos::clear_objecttype() {
  objecttype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Object_Pos::_internal_objecttype() const {
  return objecttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Object_Pos::objecttype() const {
  // @@protoc_insertion_point(field_get:Protocol.Object_Pos.ObjectType)
  return _internal_objecttype();
}
inline void Object_Pos::_internal_set_objecttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  objecttype_ = value;
}
inline void Object_Pos::set_objecttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_objecttype(value);
  // @@protoc_insertion_point(field_set:Protocol.Object_Pos.ObjectType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
