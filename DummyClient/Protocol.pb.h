// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_ATTACK;
struct C_ATTACKDefaultTypeInternal;
extern C_ATTACKDefaultTypeInternal _C_ATTACK_default_instance_;
class C_CHAT;
struct C_CHATDefaultTypeInternal;
extern C_CHATDefaultTypeInternal _C_CHAT_default_instance_;
class C_ENTER_ZONE;
struct C_ENTER_ZONEDefaultTypeInternal;
extern C_ENTER_ZONEDefaultTypeInternal _C_ENTER_ZONE_default_instance_;
class C_LOGIN;
struct C_LOGINDefaultTypeInternal;
extern C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
class C_MOVE;
struct C_MOVEDefaultTypeInternal;
extern C_MOVEDefaultTypeInternal _C_MOVE_default_instance_;
class S_ATTACK_ACK;
struct S_ATTACK_ACKDefaultTypeInternal;
extern S_ATTACK_ACKDefaultTypeInternal _S_ATTACK_ACK_default_instance_;
class S_CHAT;
struct S_CHATDefaultTypeInternal;
extern S_CHATDefaultTypeInternal _S_CHAT_default_instance_;
class S_ENTER_ACK;
struct S_ENTER_ACKDefaultTypeInternal;
extern S_ENTER_ACKDefaultTypeInternal _S_ENTER_ACK_default_instance_;
class S_LOGIN;
struct S_LOGINDefaultTypeInternal;
extern S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
class S_MOVE_ACK;
struct S_MOVE_ACKDefaultTypeInternal;
extern S_MOVE_ACKDefaultTypeInternal _S_MOVE_ACK_default_instance_;
class S_MOVE_MONSTER;
struct S_MOVE_MONSTERDefaultTypeInternal;
extern S_MOVE_MONSTERDefaultTypeInternal _S_MOVE_MONSTER_default_instance_;
class S_MOVE_PLAYER;
struct S_MOVE_PLAYERDefaultTypeInternal;
extern S_MOVE_PLAYERDefaultTypeInternal _S_MOVE_PLAYER_default_instance_;
class S_OBJ_LIST;
struct S_OBJ_LISTDefaultTypeInternal;
extern S_OBJ_LISTDefaultTypeInternal _S_OBJ_LIST_default_instance_;
class S_OBJ_REMOVE_ACK;
struct S_OBJ_REMOVE_ACKDefaultTypeInternal;
extern S_OBJ_REMOVE_ACKDefaultTypeInternal _S_OBJ_REMOVE_ACK_default_instance_;
class S_PLAYER_LIST;
struct S_PLAYER_LISTDefaultTypeInternal;
extern S_PLAYER_LISTDefaultTypeInternal _S_PLAYER_LIST_default_instance_;
class S_PLAYER_REMOVE_ACK;
struct S_PLAYER_REMOVE_ACKDefaultTypeInternal;
extern S_PLAYER_REMOVE_ACKDefaultTypeInternal _S_PLAYER_REMOVE_ACK_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_ATTACK* Arena::CreateMaybeMessage<::Protocol::C_ATTACK>(Arena*);
template<> ::Protocol::C_CHAT* Arena::CreateMaybeMessage<::Protocol::C_CHAT>(Arena*);
template<> ::Protocol::C_ENTER_ZONE* Arena::CreateMaybeMessage<::Protocol::C_ENTER_ZONE>(Arena*);
template<> ::Protocol::C_LOGIN* Arena::CreateMaybeMessage<::Protocol::C_LOGIN>(Arena*);
template<> ::Protocol::C_MOVE* Arena::CreateMaybeMessage<::Protocol::C_MOVE>(Arena*);
template<> ::Protocol::S_ATTACK_ACK* Arena::CreateMaybeMessage<::Protocol::S_ATTACK_ACK>(Arena*);
template<> ::Protocol::S_CHAT* Arena::CreateMaybeMessage<::Protocol::S_CHAT>(Arena*);
template<> ::Protocol::S_ENTER_ACK* Arena::CreateMaybeMessage<::Protocol::S_ENTER_ACK>(Arena*);
template<> ::Protocol::S_LOGIN* Arena::CreateMaybeMessage<::Protocol::S_LOGIN>(Arena*);
template<> ::Protocol::S_MOVE_ACK* Arena::CreateMaybeMessage<::Protocol::S_MOVE_ACK>(Arena*);
template<> ::Protocol::S_MOVE_MONSTER* Arena::CreateMaybeMessage<::Protocol::S_MOVE_MONSTER>(Arena*);
template<> ::Protocol::S_MOVE_PLAYER* Arena::CreateMaybeMessage<::Protocol::S_MOVE_PLAYER>(Arena*);
template<> ::Protocol::S_OBJ_LIST* Arena::CreateMaybeMessage<::Protocol::S_OBJ_LIST>(Arena*);
template<> ::Protocol::S_OBJ_REMOVE_ACK* Arena::CreateMaybeMessage<::Protocol::S_OBJ_REMOVE_ACK>(Arena*);
template<> ::Protocol::S_PLAYER_LIST* Arena::CreateMaybeMessage<::Protocol::S_PLAYER_LIST>(Arena*);
template<> ::Protocol::S_PLAYER_REMOVE_ACK* Arena::CreateMaybeMessage<::Protocol::S_PLAYER_REMOVE_ACK>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_LOGIN) */ {
 public:
  inline C_LOGIN() : C_LOGIN(nullptr) {}
  ~C_LOGIN() override;
  explicit constexpr C_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOGIN(const C_LOGIN& from);
  C_LOGIN(C_LOGIN&& from) noexcept
    : C_LOGIN() {
    *this = ::std::move(from);
  }

  inline C_LOGIN& operator=(const C_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOGIN& operator=(C_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOGIN* internal_default_instance() {
    return reinterpret_cast<const C_LOGIN*>(
               &_C_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_LOGIN& a, C_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOGIN* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_LOGIN* New() const final {
    return new C_LOGIN();
  }

  C_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_LOGIN& from);
  void MergeFrom(const C_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LOGIN";
  }
  protected:
  explicit C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LOGIN) */ {
 public:
  inline S_LOGIN() : S_LOGIN(nullptr) {}
  ~S_LOGIN() override;
  explicit constexpr S_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOGIN(const S_LOGIN& from);
  S_LOGIN(S_LOGIN&& from) noexcept
    : S_LOGIN() {
    *this = ::std::move(from);
  }

  inline S_LOGIN& operator=(const S_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOGIN& operator=(S_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOGIN* internal_default_instance() {
    return reinterpret_cast<const S_LOGIN*>(
               &_S_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_LOGIN& a, S_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOGIN* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_LOGIN* New() const final {
    return new S_LOGIN();
  }

  S_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_LOGIN& from);
  void MergeFrom(const S_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LOGIN";
  }
  protected:
  explicit S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 4,
    kSuccessFieldNumber = 1,
    kZoneidFieldNumber = 2,
    kSectoridFieldNumber = 3,
  };
  // .Protocol.Player players = 4;
  bool has_players() const;
  private:
  bool _internal_has_players() const;
  public:
  void clear_players();
  const ::Protocol::Player& players() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Player* release_players();
  ::Protocol::Player* mutable_players();
  void set_allocated_players(::Protocol::Player* players);
  private:
  const ::Protocol::Player& _internal_players() const;
  ::Protocol::Player* _internal_mutable_players();
  public:
  void unsafe_arena_set_allocated_players(
      ::Protocol::Player* players);
  ::Protocol::Player* unsafe_arena_release_players();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // uint32 zoneid = 2;
  void clear_zoneid();
  ::PROTOBUF_NAMESPACE_ID::uint32 zoneid() const;
  void set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_zoneid() const;
  void _internal_set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sectorid = 3;
  void clear_sectorid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sectorid() const;
  void set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sectorid() const;
  void _internal_set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Player* players_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::uint32 zoneid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sectorid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ENTER_ZONE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ENTER_ZONE) */ {
 public:
  inline C_ENTER_ZONE() : C_ENTER_ZONE(nullptr) {}
  ~C_ENTER_ZONE() override;
  explicit constexpr C_ENTER_ZONE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ENTER_ZONE(const C_ENTER_ZONE& from);
  C_ENTER_ZONE(C_ENTER_ZONE&& from) noexcept
    : C_ENTER_ZONE() {
    *this = ::std::move(from);
  }

  inline C_ENTER_ZONE& operator=(const C_ENTER_ZONE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ENTER_ZONE& operator=(C_ENTER_ZONE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ENTER_ZONE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ENTER_ZONE* internal_default_instance() {
    return reinterpret_cast<const C_ENTER_ZONE*>(
               &_C_ENTER_ZONE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_ENTER_ZONE& a, C_ENTER_ZONE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ENTER_ZONE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ENTER_ZONE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_ENTER_ZONE* New() const final {
    return new C_ENTER_ZONE();
  }

  C_ENTER_ZONE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_ENTER_ZONE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_ENTER_ZONE& from);
  void MergeFrom(const C_ENTER_ZONE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ENTER_ZONE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ENTER_ZONE";
  }
  protected:
  explicit C_ENTER_ZONE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendTimeFieldNumber = 1,
    kPlayerIDFieldNumber = 2,
    kZoneidFieldNumber = 3,
    kSectoridFieldNumber = 4,
  };
  // uint64 sendTime = 1;
  void clear_sendtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime() const;
  void set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sendtime() const;
  void _internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 playerID = 2;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 zoneid = 3;
  void clear_zoneid();
  ::PROTOBUF_NAMESPACE_ID::uint32 zoneid() const;
  void set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_zoneid() const;
  void _internal_set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sectorid = 4;
  void clear_sectorid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sectorid() const;
  void set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sectorid() const;
  void _internal_set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ENTER_ZONE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 zoneid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sectorid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ENTER_ACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ENTER_ACK) */ {
 public:
  inline S_ENTER_ACK() : S_ENTER_ACK(nullptr) {}
  ~S_ENTER_ACK() override;
  explicit constexpr S_ENTER_ACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ENTER_ACK(const S_ENTER_ACK& from);
  S_ENTER_ACK(S_ENTER_ACK&& from) noexcept
    : S_ENTER_ACK() {
    *this = ::std::move(from);
  }

  inline S_ENTER_ACK& operator=(const S_ENTER_ACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ENTER_ACK& operator=(S_ENTER_ACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ENTER_ACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ENTER_ACK* internal_default_instance() {
    return reinterpret_cast<const S_ENTER_ACK*>(
               &_S_ENTER_ACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_ENTER_ACK& a, S_ENTER_ACK& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ENTER_ACK* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ENTER_ACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ENTER_ACK* New() const final {
    return new S_ENTER_ACK();
  }

  S_ENTER_ACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ENTER_ACK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ENTER_ACK& from);
  void MergeFrom(const S_ENTER_ACK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ENTER_ACK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ENTER_ACK";
  }
  protected:
  explicit S_ENTER_ACK(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 5,
    kSendTimeFieldNumber = 1,
    kSuccessFieldNumber = 2,
    kZoneIDFieldNumber = 3,
    kSectoridFieldNumber = 4,
  };
  // .Protocol.D3DVECTOR pos = 5;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Protocol::D3DVECTOR& pos() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::D3DVECTOR* release_pos();
  ::Protocol::D3DVECTOR* mutable_pos();
  void set_allocated_pos(::Protocol::D3DVECTOR* pos);
  private:
  const ::Protocol::D3DVECTOR& _internal_pos() const;
  ::Protocol::D3DVECTOR* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::Protocol::D3DVECTOR* pos);
  ::Protocol::D3DVECTOR* unsafe_arena_release_pos();

  // uint64 sendTime = 1;
  void clear_sendtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime() const;
  void set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sendtime() const;
  void _internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // uint32 zoneID = 3;
  void clear_zoneid();
  ::PROTOBUF_NAMESPACE_ID::uint32 zoneid() const;
  void set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_zoneid() const;
  void _internal_set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sectorid = 4;
  void clear_sectorid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sectorid() const;
  void set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sectorid() const;
  void _internal_set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ENTER_ACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::D3DVECTOR* pos_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::uint32 zoneid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sectorid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_MOVE) */ {
 public:
  inline C_MOVE() : C_MOVE(nullptr) {}
  ~C_MOVE() override;
  explicit constexpr C_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MOVE(const C_MOVE& from);
  C_MOVE(C_MOVE&& from) noexcept
    : C_MOVE() {
    *this = ::std::move(from);
  }

  inline C_MOVE& operator=(const C_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MOVE& operator=(C_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MOVE* internal_default_instance() {
    return reinterpret_cast<const C_MOVE*>(
               &_C_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_MOVE& a, C_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MOVE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_MOVE* New() const final {
    return new C_MOVE();
  }

  C_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_MOVE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_MOVE& from);
  void MergeFrom(const C_MOVE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MOVE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_MOVE";
  }
  protected:
  explicit C_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 3,
    kSendTimeFieldNumber = 1,
    kPlayerIDFieldNumber = 2,
  };
  // .Protocol.D3DVECTOR pos = 3;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Protocol::D3DVECTOR& pos() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::D3DVECTOR* release_pos();
  ::Protocol::D3DVECTOR* mutable_pos();
  void set_allocated_pos(::Protocol::D3DVECTOR* pos);
  private:
  const ::Protocol::D3DVECTOR& _internal_pos() const;
  ::Protocol::D3DVECTOR* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::Protocol::D3DVECTOR* pos);
  ::Protocol::D3DVECTOR* unsafe_arena_release_pos();

  // uint64 sendTime = 1;
  void clear_sendtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime() const;
  void set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sendtime() const;
  void _internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 playerID = 2;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::D3DVECTOR* pos_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MOVE_ACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MOVE_ACK) */ {
 public:
  inline S_MOVE_ACK() : S_MOVE_ACK(nullptr) {}
  ~S_MOVE_ACK() override;
  explicit constexpr S_MOVE_ACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MOVE_ACK(const S_MOVE_ACK& from);
  S_MOVE_ACK(S_MOVE_ACK&& from) noexcept
    : S_MOVE_ACK() {
    *this = ::std::move(from);
  }

  inline S_MOVE_ACK& operator=(const S_MOVE_ACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MOVE_ACK& operator=(S_MOVE_ACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MOVE_ACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MOVE_ACK* internal_default_instance() {
    return reinterpret_cast<const S_MOVE_ACK*>(
               &_S_MOVE_ACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_MOVE_ACK& a, S_MOVE_ACK& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MOVE_ACK* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MOVE_ACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_MOVE_ACK* New() const final {
    return new S_MOVE_ACK();
  }

  S_MOVE_ACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_MOVE_ACK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_MOVE_ACK& from);
  void MergeFrom(const S_MOVE_ACK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MOVE_ACK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MOVE_ACK";
  }
  protected:
  explicit S_MOVE_ACK(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendTimeFieldNumber = 1,
    kSuccessFieldNumber = 2,
    kSectoridFieldNumber = 3,
  };
  // uint64 sendTime = 1;
  void clear_sendtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime() const;
  void set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sendtime() const;
  void _internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // uint32 sectorid = 3;
  void clear_sectorid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sectorid() const;
  void set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sectorid() const;
  void _internal_set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_MOVE_ACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sectorid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MOVE_MONSTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MOVE_MONSTER) */ {
 public:
  inline S_MOVE_MONSTER() : S_MOVE_MONSTER(nullptr) {}
  ~S_MOVE_MONSTER() override;
  explicit constexpr S_MOVE_MONSTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MOVE_MONSTER(const S_MOVE_MONSTER& from);
  S_MOVE_MONSTER(S_MOVE_MONSTER&& from) noexcept
    : S_MOVE_MONSTER() {
    *this = ::std::move(from);
  }

  inline S_MOVE_MONSTER& operator=(const S_MOVE_MONSTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MOVE_MONSTER& operator=(S_MOVE_MONSTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MOVE_MONSTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MOVE_MONSTER* internal_default_instance() {
    return reinterpret_cast<const S_MOVE_MONSTER*>(
               &_S_MOVE_MONSTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S_MOVE_MONSTER& a, S_MOVE_MONSTER& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MOVE_MONSTER* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MOVE_MONSTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_MOVE_MONSTER* New() const final {
    return new S_MOVE_MONSTER();
  }

  S_MOVE_MONSTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_MOVE_MONSTER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_MOVE_MONSTER& from);
  void MergeFrom(const S_MOVE_MONSTER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MOVE_MONSTER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MOVE_MONSTER";
  }
  protected:
  explicit S_MOVE_MONSTER(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 2,
    kSendTimeFieldNumber = 1,
  };
  // repeated .Protocol.Object_Pos pos = 2;
  int pos_size() const;
  private:
  int _internal_pos_size() const;
  public:
  void clear_pos();
  ::Protocol::Object_Pos* mutable_pos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >*
      mutable_pos();
  private:
  const ::Protocol::Object_Pos& _internal_pos(int index) const;
  ::Protocol::Object_Pos* _internal_add_pos();
  public:
  const ::Protocol::Object_Pos& pos(int index) const;
  ::Protocol::Object_Pos* add_pos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >&
      pos() const;

  // uint64 sendTime = 1;
  void clear_sendtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime() const;
  void set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sendtime() const;
  void _internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_MOVE_MONSTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos > pos_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MOVE_PLAYER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MOVE_PLAYER) */ {
 public:
  inline S_MOVE_PLAYER() : S_MOVE_PLAYER(nullptr) {}
  ~S_MOVE_PLAYER() override;
  explicit constexpr S_MOVE_PLAYER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MOVE_PLAYER(const S_MOVE_PLAYER& from);
  S_MOVE_PLAYER(S_MOVE_PLAYER&& from) noexcept
    : S_MOVE_PLAYER() {
    *this = ::std::move(from);
  }

  inline S_MOVE_PLAYER& operator=(const S_MOVE_PLAYER& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MOVE_PLAYER& operator=(S_MOVE_PLAYER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MOVE_PLAYER& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MOVE_PLAYER* internal_default_instance() {
    return reinterpret_cast<const S_MOVE_PLAYER*>(
               &_S_MOVE_PLAYER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_MOVE_PLAYER& a, S_MOVE_PLAYER& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MOVE_PLAYER* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MOVE_PLAYER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_MOVE_PLAYER* New() const final {
    return new S_MOVE_PLAYER();
  }

  S_MOVE_PLAYER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_MOVE_PLAYER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_MOVE_PLAYER& from);
  void MergeFrom(const S_MOVE_PLAYER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MOVE_PLAYER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MOVE_PLAYER";
  }
  protected:
  explicit S_MOVE_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 2,
    kSendTimeFieldNumber = 1,
  };
  // repeated .Protocol.Object_Pos pos = 2;
  int pos_size() const;
  private:
  int _internal_pos_size() const;
  public:
  void clear_pos();
  ::Protocol::Object_Pos* mutable_pos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >*
      mutable_pos();
  private:
  const ::Protocol::Object_Pos& _internal_pos(int index) const;
  ::Protocol::Object_Pos* _internal_add_pos();
  public:
  const ::Protocol::Object_Pos& pos(int index) const;
  ::Protocol::Object_Pos* add_pos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >&
      pos() const;

  // uint64 sendTime = 1;
  void clear_sendtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime() const;
  void set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sendtime() const;
  void _internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_MOVE_PLAYER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos > pos_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ATTACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ATTACK) */ {
 public:
  inline C_ATTACK() : C_ATTACK(nullptr) {}
  ~C_ATTACK() override;
  explicit constexpr C_ATTACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ATTACK(const C_ATTACK& from);
  C_ATTACK(C_ATTACK&& from) noexcept
    : C_ATTACK() {
    *this = ::std::move(from);
  }

  inline C_ATTACK& operator=(const C_ATTACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ATTACK& operator=(C_ATTACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ATTACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ATTACK* internal_default_instance() {
    return reinterpret_cast<const C_ATTACK*>(
               &_C_ATTACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C_ATTACK& a, C_ATTACK& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ATTACK* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ATTACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_ATTACK* New() const final {
    return new C_ATTACK();
  }

  C_ATTACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_ATTACK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_ATTACK& from);
  void MergeFrom(const C_ATTACK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ATTACK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ATTACK";
  }
  protected:
  explicit C_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendTimeFieldNumber = 1,
    kTargetIDFieldNumber = 3,
    kPlayerIDFieldNumber = 2,
    kSkillIDFieldNumber = 4,
  };
  // uint64 sendTime = 1;
  void clear_sendtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime() const;
  void set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sendtime() const;
  void _internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 targetID = 3;
  void clear_targetid();
  ::PROTOBUF_NAMESPACE_ID::uint64 targetid() const;
  void set_targetid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_targetid() const;
  void _internal_set_targetid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 playerID = 2;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 skillID = 4;
  void clear_skillid();
  ::PROTOBUF_NAMESPACE_ID::uint32 skillid() const;
  void set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_skillid() const;
  void _internal_set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ATTACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 targetid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 skillid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ATTACK_ACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ATTACK_ACK) */ {
 public:
  inline S_ATTACK_ACK() : S_ATTACK_ACK(nullptr) {}
  ~S_ATTACK_ACK() override;
  explicit constexpr S_ATTACK_ACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ATTACK_ACK(const S_ATTACK_ACK& from);
  S_ATTACK_ACK(S_ATTACK_ACK&& from) noexcept
    : S_ATTACK_ACK() {
    *this = ::std::move(from);
  }

  inline S_ATTACK_ACK& operator=(const S_ATTACK_ACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ATTACK_ACK& operator=(S_ATTACK_ACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ATTACK_ACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ATTACK_ACK* internal_default_instance() {
    return reinterpret_cast<const S_ATTACK_ACK*>(
               &_S_ATTACK_ACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S_ATTACK_ACK& a, S_ATTACK_ACK& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ATTACK_ACK* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ATTACK_ACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ATTACK_ACK* New() const final {
    return new S_ATTACK_ACK();
  }

  S_ATTACK_ACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ATTACK_ACK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ATTACK_ACK& from);
  void MergeFrom(const S_ATTACK_ACK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ATTACK_ACK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ATTACK_ACK";
  }
  protected:
  explicit S_ATTACK_ACK(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendTimeFieldNumber = 1,
    kSuccessFieldNumber = 2,
    kTargetAliveFieldNumber = 3,
  };
  // uint64 sendTime = 1;
  void clear_sendtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime() const;
  void set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sendtime() const;
  void _internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // bool targetAlive = 3;
  void clear_targetalive();
  bool targetalive() const;
  void set_targetalive(bool value);
  private:
  bool _internal_targetalive() const;
  void _internal_set_targetalive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ATTACK_ACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime_;
  bool success_;
  bool targetalive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_OBJ_LIST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_OBJ_LIST) */ {
 public:
  inline S_OBJ_LIST() : S_OBJ_LIST(nullptr) {}
  ~S_OBJ_LIST() override;
  explicit constexpr S_OBJ_LIST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_OBJ_LIST(const S_OBJ_LIST& from);
  S_OBJ_LIST(S_OBJ_LIST&& from) noexcept
    : S_OBJ_LIST() {
    *this = ::std::move(from);
  }

  inline S_OBJ_LIST& operator=(const S_OBJ_LIST& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OBJ_LIST& operator=(S_OBJ_LIST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_OBJ_LIST& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_OBJ_LIST* internal_default_instance() {
    return reinterpret_cast<const S_OBJ_LIST*>(
               &_S_OBJ_LIST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(S_OBJ_LIST& a, S_OBJ_LIST& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OBJ_LIST* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OBJ_LIST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_OBJ_LIST* New() const final {
    return new S_OBJ_LIST();
  }

  S_OBJ_LIST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_OBJ_LIST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_OBJ_LIST& from);
  void MergeFrom(const S_OBJ_LIST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_OBJ_LIST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_OBJ_LIST";
  }
  protected:
  explicit S_OBJ_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 3,
    kSendTimeFieldNumber = 1,
    kSectoridFieldNumber = 2,
  };
  // repeated .Protocol.Object_Pos pos = 3;
  int pos_size() const;
  private:
  int _internal_pos_size() const;
  public:
  void clear_pos();
  ::Protocol::Object_Pos* mutable_pos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >*
      mutable_pos();
  private:
  const ::Protocol::Object_Pos& _internal_pos(int index) const;
  ::Protocol::Object_Pos* _internal_add_pos();
  public:
  const ::Protocol::Object_Pos& pos(int index) const;
  ::Protocol::Object_Pos* add_pos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >&
      pos() const;

  // uint64 sendTime = 1;
  void clear_sendtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime() const;
  void set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sendtime() const;
  void _internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 sectorid = 2;
  void clear_sectorid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sectorid() const;
  void set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sectorid() const;
  void _internal_set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_OBJ_LIST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos > pos_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sectorid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_OBJ_REMOVE_ACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_OBJ_REMOVE_ACK) */ {
 public:
  inline S_OBJ_REMOVE_ACK() : S_OBJ_REMOVE_ACK(nullptr) {}
  ~S_OBJ_REMOVE_ACK() override;
  explicit constexpr S_OBJ_REMOVE_ACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_OBJ_REMOVE_ACK(const S_OBJ_REMOVE_ACK& from);
  S_OBJ_REMOVE_ACK(S_OBJ_REMOVE_ACK&& from) noexcept
    : S_OBJ_REMOVE_ACK() {
    *this = ::std::move(from);
  }

  inline S_OBJ_REMOVE_ACK& operator=(const S_OBJ_REMOVE_ACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OBJ_REMOVE_ACK& operator=(S_OBJ_REMOVE_ACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_OBJ_REMOVE_ACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_OBJ_REMOVE_ACK* internal_default_instance() {
    return reinterpret_cast<const S_OBJ_REMOVE_ACK*>(
               &_S_OBJ_REMOVE_ACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S_OBJ_REMOVE_ACK& a, S_OBJ_REMOVE_ACK& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OBJ_REMOVE_ACK* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OBJ_REMOVE_ACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_OBJ_REMOVE_ACK* New() const final {
    return new S_OBJ_REMOVE_ACK();
  }

  S_OBJ_REMOVE_ACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_OBJ_REMOVE_ACK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_OBJ_REMOVE_ACK& from);
  void MergeFrom(const S_OBJ_REMOVE_ACK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_OBJ_REMOVE_ACK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_OBJ_REMOVE_ACK";
  }
  protected:
  explicit S_OBJ_REMOVE_ACK(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 3,
    kSendTimeFieldNumber = 1,
    kSectoridFieldNumber = 2,
  };
  // repeated .Protocol.Object_Pos pos = 3;
  int pos_size() const;
  private:
  int _internal_pos_size() const;
  public:
  void clear_pos();
  ::Protocol::Object_Pos* mutable_pos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >*
      mutable_pos();
  private:
  const ::Protocol::Object_Pos& _internal_pos(int index) const;
  ::Protocol::Object_Pos* _internal_add_pos();
  public:
  const ::Protocol::Object_Pos& pos(int index) const;
  ::Protocol::Object_Pos* add_pos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >&
      pos() const;

  // uint64 sendTime = 1;
  void clear_sendtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime() const;
  void set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sendtime() const;
  void _internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 sectorid = 2;
  void clear_sectorid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sectorid() const;
  void set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sectorid() const;
  void _internal_set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_OBJ_REMOVE_ACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos > pos_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sectorid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLAYER_LIST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PLAYER_LIST) */ {
 public:
  inline S_PLAYER_LIST() : S_PLAYER_LIST(nullptr) {}
  ~S_PLAYER_LIST() override;
  explicit constexpr S_PLAYER_LIST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLAYER_LIST(const S_PLAYER_LIST& from);
  S_PLAYER_LIST(S_PLAYER_LIST&& from) noexcept
    : S_PLAYER_LIST() {
    *this = ::std::move(from);
  }

  inline S_PLAYER_LIST& operator=(const S_PLAYER_LIST& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLAYER_LIST& operator=(S_PLAYER_LIST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLAYER_LIST& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLAYER_LIST* internal_default_instance() {
    return reinterpret_cast<const S_PLAYER_LIST*>(
               &_S_PLAYER_LIST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(S_PLAYER_LIST& a, S_PLAYER_LIST& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLAYER_LIST* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLAYER_LIST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_PLAYER_LIST* New() const final {
    return new S_PLAYER_LIST();
  }

  S_PLAYER_LIST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_PLAYER_LIST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_PLAYER_LIST& from);
  void MergeFrom(const S_PLAYER_LIST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLAYER_LIST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PLAYER_LIST";
  }
  protected:
  explicit S_PLAYER_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 3,
    kSendTimeFieldNumber = 1,
    kSectoridFieldNumber = 2,
  };
  // repeated .Protocol.Object_Pos pos = 3;
  int pos_size() const;
  private:
  int _internal_pos_size() const;
  public:
  void clear_pos();
  ::Protocol::Object_Pos* mutable_pos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >*
      mutable_pos();
  private:
  const ::Protocol::Object_Pos& _internal_pos(int index) const;
  ::Protocol::Object_Pos* _internal_add_pos();
  public:
  const ::Protocol::Object_Pos& pos(int index) const;
  ::Protocol::Object_Pos* add_pos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >&
      pos() const;

  // uint64 sendTime = 1;
  void clear_sendtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime() const;
  void set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sendtime() const;
  void _internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 sectorid = 2;
  void clear_sectorid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sectorid() const;
  void set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sectorid() const;
  void _internal_set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_PLAYER_LIST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos > pos_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sectorid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLAYER_REMOVE_ACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PLAYER_REMOVE_ACK) */ {
 public:
  inline S_PLAYER_REMOVE_ACK() : S_PLAYER_REMOVE_ACK(nullptr) {}
  ~S_PLAYER_REMOVE_ACK() override;
  explicit constexpr S_PLAYER_REMOVE_ACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLAYER_REMOVE_ACK(const S_PLAYER_REMOVE_ACK& from);
  S_PLAYER_REMOVE_ACK(S_PLAYER_REMOVE_ACK&& from) noexcept
    : S_PLAYER_REMOVE_ACK() {
    *this = ::std::move(from);
  }

  inline S_PLAYER_REMOVE_ACK& operator=(const S_PLAYER_REMOVE_ACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLAYER_REMOVE_ACK& operator=(S_PLAYER_REMOVE_ACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLAYER_REMOVE_ACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLAYER_REMOVE_ACK* internal_default_instance() {
    return reinterpret_cast<const S_PLAYER_REMOVE_ACK*>(
               &_S_PLAYER_REMOVE_ACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S_PLAYER_REMOVE_ACK& a, S_PLAYER_REMOVE_ACK& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLAYER_REMOVE_ACK* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLAYER_REMOVE_ACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_PLAYER_REMOVE_ACK* New() const final {
    return new S_PLAYER_REMOVE_ACK();
  }

  S_PLAYER_REMOVE_ACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_PLAYER_REMOVE_ACK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_PLAYER_REMOVE_ACK& from);
  void MergeFrom(const S_PLAYER_REMOVE_ACK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLAYER_REMOVE_ACK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PLAYER_REMOVE_ACK";
  }
  protected:
  explicit S_PLAYER_REMOVE_ACK(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 3,
    kSendTimeFieldNumber = 1,
    kSectoridFieldNumber = 2,
  };
  // repeated .Protocol.Object_Pos pos = 3;
  int pos_size() const;
  private:
  int _internal_pos_size() const;
  public:
  void clear_pos();
  ::Protocol::Object_Pos* mutable_pos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >*
      mutable_pos();
  private:
  const ::Protocol::Object_Pos& _internal_pos(int index) const;
  ::Protocol::Object_Pos* _internal_add_pos();
  public:
  const ::Protocol::Object_Pos& pos(int index) const;
  ::Protocol::Object_Pos* add_pos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >&
      pos() const;

  // uint64 sendTime = 1;
  void clear_sendtime();
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime() const;
  void set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sendtime() const;
  void _internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 sectorid = 2;
  void clear_sectorid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sectorid() const;
  void set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sectorid() const;
  void _internal_set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_PLAYER_REMOVE_ACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos > pos_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sendtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sectorid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CHAT) */ {
 public:
  inline C_CHAT() : C_CHAT(nullptr) {}
  ~C_CHAT() override;
  explicit constexpr C_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CHAT(const C_CHAT& from);
  C_CHAT(C_CHAT&& from) noexcept
    : C_CHAT() {
    *this = ::std::move(from);
  }

  inline C_CHAT& operator=(const C_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHAT& operator=(C_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHAT* internal_default_instance() {
    return reinterpret_cast<const C_CHAT*>(
               &_C_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(C_CHAT& a, C_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHAT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_CHAT* New() const final {
    return new C_CHAT();
  }

  C_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_CHAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_CHAT& from);
  void MergeFrom(const C_CHAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CHAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CHAT";
  }
  protected:
  explicit C_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHAT) */ {
 public:
  inline S_CHAT() : S_CHAT(nullptr) {}
  ~S_CHAT() override;
  explicit constexpr S_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHAT(const S_CHAT& from);
  S_CHAT(S_CHAT&& from) noexcept
    : S_CHAT() {
    *this = ::std::move(from);
  }

  inline S_CHAT& operator=(const S_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHAT& operator=(S_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHAT* internal_default_instance() {
    return reinterpret_cast<const S_CHAT*>(
               &_S_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(S_CHAT& a, S_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHAT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CHAT* New() const final {
    return new S_CHAT();
  }

  S_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CHAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CHAT& from);
  void MergeFrom(const S_CHAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHAT";
  }
  protected:
  explicit S_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // uint64 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint64 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::uint64 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_LOGIN

// -------------------------------------------------------------------

// S_LOGIN

// bool success = 1;
inline void S_LOGIN::clear_success() {
  success_ = false;
}
inline bool S_LOGIN::_internal_success() const {
  return success_;
}
inline bool S_LOGIN::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.success)
  return _internal_success();
}
inline void S_LOGIN::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_LOGIN::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.success)
}

// uint32 zoneid = 2;
inline void S_LOGIN::clear_zoneid() {
  zoneid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_LOGIN::_internal_zoneid() const {
  return zoneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_LOGIN::zoneid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.zoneid)
  return _internal_zoneid();
}
inline void S_LOGIN::_internal_set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  zoneid_ = value;
}
inline void S_LOGIN::set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_zoneid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.zoneid)
}

// uint32 sectorid = 3;
inline void S_LOGIN::clear_sectorid() {
  sectorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_LOGIN::_internal_sectorid() const {
  return sectorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_LOGIN::sectorid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.sectorid)
  return _internal_sectorid();
}
inline void S_LOGIN::_internal_set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sectorid_ = value;
}
inline void S_LOGIN::set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sectorid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.sectorid)
}

// .Protocol.Player players = 4;
inline bool S_LOGIN::_internal_has_players() const {
  return this != internal_default_instance() && players_ != nullptr;
}
inline bool S_LOGIN::has_players() const {
  return _internal_has_players();
}
inline const ::Protocol::Player& S_LOGIN::_internal_players() const {
  const ::Protocol::Player* p = players_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_LOGIN::players() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.players)
  return _internal_players();
}
inline void S_LOGIN::unsafe_arena_set_allocated_players(
    ::Protocol::Player* players) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(players_);
  }
  players_ = players;
  if (players) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_LOGIN.players)
}
inline ::Protocol::Player* S_LOGIN::release_players() {
  
  ::Protocol::Player* temp = players_;
  players_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Player* S_LOGIN::unsafe_arena_release_players() {
  // @@protoc_insertion_point(field_release:Protocol.S_LOGIN.players)
  
  ::Protocol::Player* temp = players_;
  players_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_LOGIN::_internal_mutable_players() {
  
  if (players_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    players_ = p;
  }
  return players_;
}
inline ::Protocol::Player* S_LOGIN::mutable_players() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_LOGIN.players)
  return _internal_mutable_players();
}
inline void S_LOGIN::set_allocated_players(::Protocol::Player* players) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(players_);
  }
  if (players) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(players));
    if (message_arena != submessage_arena) {
      players = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, players, submessage_arena);
    }
    
  } else {
    
  }
  players_ = players;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_LOGIN.players)
}

// -------------------------------------------------------------------

// C_ENTER_ZONE

// uint64 sendTime = 1;
inline void C_ENTER_ZONE::clear_sendtime() {
  sendtime_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_ENTER_ZONE::_internal_sendtime() const {
  return sendtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_ENTER_ZONE::sendtime() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ENTER_ZONE.sendTime)
  return _internal_sendtime();
}
inline void C_ENTER_ZONE::_internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sendtime_ = value;
}
inline void C_ENTER_ZONE::set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ENTER_ZONE.sendTime)
}

// uint32 playerID = 2;
inline void C_ENTER_ZONE::clear_playerid() {
  playerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_ENTER_ZONE::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_ENTER_ZONE::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ENTER_ZONE.playerID)
  return _internal_playerid();
}
inline void C_ENTER_ZONE::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  playerid_ = value;
}
inline void C_ENTER_ZONE::set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ENTER_ZONE.playerID)
}

// uint32 zoneid = 3;
inline void C_ENTER_ZONE::clear_zoneid() {
  zoneid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_ENTER_ZONE::_internal_zoneid() const {
  return zoneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_ENTER_ZONE::zoneid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ENTER_ZONE.zoneid)
  return _internal_zoneid();
}
inline void C_ENTER_ZONE::_internal_set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  zoneid_ = value;
}
inline void C_ENTER_ZONE::set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_zoneid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ENTER_ZONE.zoneid)
}

// uint32 sectorid = 4;
inline void C_ENTER_ZONE::clear_sectorid() {
  sectorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_ENTER_ZONE::_internal_sectorid() const {
  return sectorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_ENTER_ZONE::sectorid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ENTER_ZONE.sectorid)
  return _internal_sectorid();
}
inline void C_ENTER_ZONE::_internal_set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sectorid_ = value;
}
inline void C_ENTER_ZONE::set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sectorid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ENTER_ZONE.sectorid)
}

// -------------------------------------------------------------------

// S_ENTER_ACK

// uint64 sendTime = 1;
inline void S_ENTER_ACK::clear_sendtime() {
  sendtime_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_ENTER_ACK::_internal_sendtime() const {
  return sendtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_ENTER_ACK::sendtime() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_ACK.sendTime)
  return _internal_sendtime();
}
inline void S_ENTER_ACK::_internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sendtime_ = value;
}
inline void S_ENTER_ACK::set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_ACK.sendTime)
}

// bool success = 2;
inline void S_ENTER_ACK::clear_success() {
  success_ = false;
}
inline bool S_ENTER_ACK::_internal_success() const {
  return success_;
}
inline bool S_ENTER_ACK::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_ACK.success)
  return _internal_success();
}
inline void S_ENTER_ACK::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_ENTER_ACK::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_ACK.success)
}

// uint32 zoneID = 3;
inline void S_ENTER_ACK::clear_zoneid() {
  zoneid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_ENTER_ACK::_internal_zoneid() const {
  return zoneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_ENTER_ACK::zoneid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_ACK.zoneID)
  return _internal_zoneid();
}
inline void S_ENTER_ACK::_internal_set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  zoneid_ = value;
}
inline void S_ENTER_ACK::set_zoneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_zoneid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_ACK.zoneID)
}

// uint32 sectorid = 4;
inline void S_ENTER_ACK::clear_sectorid() {
  sectorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_ENTER_ACK::_internal_sectorid() const {
  return sectorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_ENTER_ACK::sectorid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_ACK.sectorid)
  return _internal_sectorid();
}
inline void S_ENTER_ACK::_internal_set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sectorid_ = value;
}
inline void S_ENTER_ACK::set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sectorid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_ACK.sectorid)
}

// .Protocol.D3DVECTOR pos = 5;
inline bool S_ENTER_ACK::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool S_ENTER_ACK::has_pos() const {
  return _internal_has_pos();
}
inline const ::Protocol::D3DVECTOR& S_ENTER_ACK::_internal_pos() const {
  const ::Protocol::D3DVECTOR* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::D3DVECTOR&>(
      ::Protocol::_D3DVECTOR_default_instance_);
}
inline const ::Protocol::D3DVECTOR& S_ENTER_ACK::pos() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_ACK.pos)
  return _internal_pos();
}
inline void S_ENTER_ACK::unsafe_arena_set_allocated_pos(
    ::Protocol::D3DVECTOR* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ENTER_ACK.pos)
}
inline ::Protocol::D3DVECTOR* S_ENTER_ACK::release_pos() {
  
  ::Protocol::D3DVECTOR* temp = pos_;
  pos_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::D3DVECTOR* S_ENTER_ACK::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:Protocol.S_ENTER_ACK.pos)
  
  ::Protocol::D3DVECTOR* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::Protocol::D3DVECTOR* S_ENTER_ACK::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::D3DVECTOR>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::Protocol::D3DVECTOR* S_ENTER_ACK::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ENTER_ACK.pos)
  return _internal_mutable_pos();
}
inline void S_ENTER_ACK::set_allocated_pos(::Protocol::D3DVECTOR* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos));
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ENTER_ACK.pos)
}

// -------------------------------------------------------------------

// C_MOVE

// uint64 sendTime = 1;
inline void C_MOVE::clear_sendtime() {
  sendtime_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_MOVE::_internal_sendtime() const {
  return sendtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_MOVE::sendtime() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE.sendTime)
  return _internal_sendtime();
}
inline void C_MOVE::_internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sendtime_ = value;
}
inline void C_MOVE::set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MOVE.sendTime)
}

// uint32 playerID = 2;
inline void C_MOVE::clear_playerid() {
  playerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_MOVE::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_MOVE::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE.playerID)
  return _internal_playerid();
}
inline void C_MOVE::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  playerid_ = value;
}
inline void C_MOVE::set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MOVE.playerID)
}

// .Protocol.D3DVECTOR pos = 3;
inline bool C_MOVE::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool C_MOVE::has_pos() const {
  return _internal_has_pos();
}
inline const ::Protocol::D3DVECTOR& C_MOVE::_internal_pos() const {
  const ::Protocol::D3DVECTOR* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::D3DVECTOR&>(
      ::Protocol::_D3DVECTOR_default_instance_);
}
inline const ::Protocol::D3DVECTOR& C_MOVE::pos() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE.pos)
  return _internal_pos();
}
inline void C_MOVE::unsafe_arena_set_allocated_pos(
    ::Protocol::D3DVECTOR* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_MOVE.pos)
}
inline ::Protocol::D3DVECTOR* C_MOVE::release_pos() {
  
  ::Protocol::D3DVECTOR* temp = pos_;
  pos_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::D3DVECTOR* C_MOVE::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:Protocol.C_MOVE.pos)
  
  ::Protocol::D3DVECTOR* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::Protocol::D3DVECTOR* C_MOVE::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::D3DVECTOR>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::Protocol::D3DVECTOR* C_MOVE::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_MOVE.pos)
  return _internal_mutable_pos();
}
inline void C_MOVE::set_allocated_pos(::Protocol::D3DVECTOR* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos));
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_MOVE.pos)
}

// -------------------------------------------------------------------

// S_MOVE_ACK

// uint64 sendTime = 1;
inline void S_MOVE_ACK::clear_sendtime() {
  sendtime_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_MOVE_ACK::_internal_sendtime() const {
  return sendtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_MOVE_ACK::sendtime() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE_ACK.sendTime)
  return _internal_sendtime();
}
inline void S_MOVE_ACK::_internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sendtime_ = value;
}
inline void S_MOVE_ACK::set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MOVE_ACK.sendTime)
}

// bool success = 2;
inline void S_MOVE_ACK::clear_success() {
  success_ = false;
}
inline bool S_MOVE_ACK::_internal_success() const {
  return success_;
}
inline bool S_MOVE_ACK::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE_ACK.success)
  return _internal_success();
}
inline void S_MOVE_ACK::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_MOVE_ACK::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MOVE_ACK.success)
}

// uint32 sectorid = 3;
inline void S_MOVE_ACK::clear_sectorid() {
  sectorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_MOVE_ACK::_internal_sectorid() const {
  return sectorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_MOVE_ACK::sectorid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE_ACK.sectorid)
  return _internal_sectorid();
}
inline void S_MOVE_ACK::_internal_set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sectorid_ = value;
}
inline void S_MOVE_ACK::set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sectorid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MOVE_ACK.sectorid)
}

// -------------------------------------------------------------------

// S_MOVE_MONSTER

// uint64 sendTime = 1;
inline void S_MOVE_MONSTER::clear_sendtime() {
  sendtime_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_MOVE_MONSTER::_internal_sendtime() const {
  return sendtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_MOVE_MONSTER::sendtime() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE_MONSTER.sendTime)
  return _internal_sendtime();
}
inline void S_MOVE_MONSTER::_internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sendtime_ = value;
}
inline void S_MOVE_MONSTER::set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MOVE_MONSTER.sendTime)
}

// repeated .Protocol.Object_Pos pos = 2;
inline int S_MOVE_MONSTER::_internal_pos_size() const {
  return pos_.size();
}
inline int S_MOVE_MONSTER::pos_size() const {
  return _internal_pos_size();
}
inline ::Protocol::Object_Pos* S_MOVE_MONSTER::mutable_pos(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_MOVE_MONSTER.pos)
  return pos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >*
S_MOVE_MONSTER::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_MOVE_MONSTER.pos)
  return &pos_;
}
inline const ::Protocol::Object_Pos& S_MOVE_MONSTER::_internal_pos(int index) const {
  return pos_.Get(index);
}
inline const ::Protocol::Object_Pos& S_MOVE_MONSTER::pos(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE_MONSTER.pos)
  return _internal_pos(index);
}
inline ::Protocol::Object_Pos* S_MOVE_MONSTER::_internal_add_pos() {
  return pos_.Add();
}
inline ::Protocol::Object_Pos* S_MOVE_MONSTER::add_pos() {
  // @@protoc_insertion_point(field_add:Protocol.S_MOVE_MONSTER.pos)
  return _internal_add_pos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >&
S_MOVE_MONSTER::pos() const {
  // @@protoc_insertion_point(field_list:Protocol.S_MOVE_MONSTER.pos)
  return pos_;
}

// -------------------------------------------------------------------

// S_MOVE_PLAYER

// uint64 sendTime = 1;
inline void S_MOVE_PLAYER::clear_sendtime() {
  sendtime_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_MOVE_PLAYER::_internal_sendtime() const {
  return sendtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_MOVE_PLAYER::sendtime() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE_PLAYER.sendTime)
  return _internal_sendtime();
}
inline void S_MOVE_PLAYER::_internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sendtime_ = value;
}
inline void S_MOVE_PLAYER::set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MOVE_PLAYER.sendTime)
}

// repeated .Protocol.Object_Pos pos = 2;
inline int S_MOVE_PLAYER::_internal_pos_size() const {
  return pos_.size();
}
inline int S_MOVE_PLAYER::pos_size() const {
  return _internal_pos_size();
}
inline ::Protocol::Object_Pos* S_MOVE_PLAYER::mutable_pos(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_MOVE_PLAYER.pos)
  return pos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >*
S_MOVE_PLAYER::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_MOVE_PLAYER.pos)
  return &pos_;
}
inline const ::Protocol::Object_Pos& S_MOVE_PLAYER::_internal_pos(int index) const {
  return pos_.Get(index);
}
inline const ::Protocol::Object_Pos& S_MOVE_PLAYER::pos(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE_PLAYER.pos)
  return _internal_pos(index);
}
inline ::Protocol::Object_Pos* S_MOVE_PLAYER::_internal_add_pos() {
  return pos_.Add();
}
inline ::Protocol::Object_Pos* S_MOVE_PLAYER::add_pos() {
  // @@protoc_insertion_point(field_add:Protocol.S_MOVE_PLAYER.pos)
  return _internal_add_pos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >&
S_MOVE_PLAYER::pos() const {
  // @@protoc_insertion_point(field_list:Protocol.S_MOVE_PLAYER.pos)
  return pos_;
}

// -------------------------------------------------------------------

// C_ATTACK

// uint64 sendTime = 1;
inline void C_ATTACK::clear_sendtime() {
  sendtime_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_ATTACK::_internal_sendtime() const {
  return sendtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_ATTACK::sendtime() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ATTACK.sendTime)
  return _internal_sendtime();
}
inline void C_ATTACK::_internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sendtime_ = value;
}
inline void C_ATTACK::set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ATTACK.sendTime)
}

// uint32 playerID = 2;
inline void C_ATTACK::clear_playerid() {
  playerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_ATTACK::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_ATTACK::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ATTACK.playerID)
  return _internal_playerid();
}
inline void C_ATTACK::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  playerid_ = value;
}
inline void C_ATTACK::set_playerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ATTACK.playerID)
}

// uint64 targetID = 3;
inline void C_ATTACK::clear_targetid() {
  targetid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_ATTACK::_internal_targetid() const {
  return targetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_ATTACK::targetid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ATTACK.targetID)
  return _internal_targetid();
}
inline void C_ATTACK::_internal_set_targetid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  targetid_ = value;
}
inline void C_ATTACK::set_targetid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ATTACK.targetID)
}

// uint32 skillID = 4;
inline void C_ATTACK::clear_skillid() {
  skillid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_ATTACK::_internal_skillid() const {
  return skillid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_ATTACK::skillid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ATTACK.skillID)
  return _internal_skillid();
}
inline void C_ATTACK::_internal_set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  skillid_ = value;
}
inline void C_ATTACK::set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_skillid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ATTACK.skillID)
}

// -------------------------------------------------------------------

// S_ATTACK_ACK

// uint64 sendTime = 1;
inline void S_ATTACK_ACK::clear_sendtime() {
  sendtime_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_ATTACK_ACK::_internal_sendtime() const {
  return sendtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_ATTACK_ACK::sendtime() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ATTACK_ACK.sendTime)
  return _internal_sendtime();
}
inline void S_ATTACK_ACK::_internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sendtime_ = value;
}
inline void S_ATTACK_ACK::set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ATTACK_ACK.sendTime)
}

// bool success = 2;
inline void S_ATTACK_ACK::clear_success() {
  success_ = false;
}
inline bool S_ATTACK_ACK::_internal_success() const {
  return success_;
}
inline bool S_ATTACK_ACK::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ATTACK_ACK.success)
  return _internal_success();
}
inline void S_ATTACK_ACK::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_ATTACK_ACK::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ATTACK_ACK.success)
}

// bool targetAlive = 3;
inline void S_ATTACK_ACK::clear_targetalive() {
  targetalive_ = false;
}
inline bool S_ATTACK_ACK::_internal_targetalive() const {
  return targetalive_;
}
inline bool S_ATTACK_ACK::targetalive() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ATTACK_ACK.targetAlive)
  return _internal_targetalive();
}
inline void S_ATTACK_ACK::_internal_set_targetalive(bool value) {
  
  targetalive_ = value;
}
inline void S_ATTACK_ACK::set_targetalive(bool value) {
  _internal_set_targetalive(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ATTACK_ACK.targetAlive)
}

// -------------------------------------------------------------------

// S_OBJ_LIST

// uint64 sendTime = 1;
inline void S_OBJ_LIST::clear_sendtime() {
  sendtime_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_OBJ_LIST::_internal_sendtime() const {
  return sendtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_OBJ_LIST::sendtime() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OBJ_LIST.sendTime)
  return _internal_sendtime();
}
inline void S_OBJ_LIST::_internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sendtime_ = value;
}
inline void S_OBJ_LIST::set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OBJ_LIST.sendTime)
}

// uint32 sectorid = 2;
inline void S_OBJ_LIST::clear_sectorid() {
  sectorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_OBJ_LIST::_internal_sectorid() const {
  return sectorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_OBJ_LIST::sectorid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OBJ_LIST.sectorid)
  return _internal_sectorid();
}
inline void S_OBJ_LIST::_internal_set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sectorid_ = value;
}
inline void S_OBJ_LIST::set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sectorid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OBJ_LIST.sectorid)
}

// repeated .Protocol.Object_Pos pos = 3;
inline int S_OBJ_LIST::_internal_pos_size() const {
  return pos_.size();
}
inline int S_OBJ_LIST::pos_size() const {
  return _internal_pos_size();
}
inline ::Protocol::Object_Pos* S_OBJ_LIST::mutable_pos(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_OBJ_LIST.pos)
  return pos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >*
S_OBJ_LIST::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_OBJ_LIST.pos)
  return &pos_;
}
inline const ::Protocol::Object_Pos& S_OBJ_LIST::_internal_pos(int index) const {
  return pos_.Get(index);
}
inline const ::Protocol::Object_Pos& S_OBJ_LIST::pos(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_OBJ_LIST.pos)
  return _internal_pos(index);
}
inline ::Protocol::Object_Pos* S_OBJ_LIST::_internal_add_pos() {
  return pos_.Add();
}
inline ::Protocol::Object_Pos* S_OBJ_LIST::add_pos() {
  // @@protoc_insertion_point(field_add:Protocol.S_OBJ_LIST.pos)
  return _internal_add_pos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >&
S_OBJ_LIST::pos() const {
  // @@protoc_insertion_point(field_list:Protocol.S_OBJ_LIST.pos)
  return pos_;
}

// -------------------------------------------------------------------

// S_OBJ_REMOVE_ACK

// uint64 sendTime = 1;
inline void S_OBJ_REMOVE_ACK::clear_sendtime() {
  sendtime_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_OBJ_REMOVE_ACK::_internal_sendtime() const {
  return sendtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_OBJ_REMOVE_ACK::sendtime() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OBJ_REMOVE_ACK.sendTime)
  return _internal_sendtime();
}
inline void S_OBJ_REMOVE_ACK::_internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sendtime_ = value;
}
inline void S_OBJ_REMOVE_ACK::set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OBJ_REMOVE_ACK.sendTime)
}

// uint32 sectorid = 2;
inline void S_OBJ_REMOVE_ACK::clear_sectorid() {
  sectorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_OBJ_REMOVE_ACK::_internal_sectorid() const {
  return sectorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_OBJ_REMOVE_ACK::sectorid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OBJ_REMOVE_ACK.sectorid)
  return _internal_sectorid();
}
inline void S_OBJ_REMOVE_ACK::_internal_set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sectorid_ = value;
}
inline void S_OBJ_REMOVE_ACK::set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sectorid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OBJ_REMOVE_ACK.sectorid)
}

// repeated .Protocol.Object_Pos pos = 3;
inline int S_OBJ_REMOVE_ACK::_internal_pos_size() const {
  return pos_.size();
}
inline int S_OBJ_REMOVE_ACK::pos_size() const {
  return _internal_pos_size();
}
inline ::Protocol::Object_Pos* S_OBJ_REMOVE_ACK::mutable_pos(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_OBJ_REMOVE_ACK.pos)
  return pos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >*
S_OBJ_REMOVE_ACK::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_OBJ_REMOVE_ACK.pos)
  return &pos_;
}
inline const ::Protocol::Object_Pos& S_OBJ_REMOVE_ACK::_internal_pos(int index) const {
  return pos_.Get(index);
}
inline const ::Protocol::Object_Pos& S_OBJ_REMOVE_ACK::pos(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_OBJ_REMOVE_ACK.pos)
  return _internal_pos(index);
}
inline ::Protocol::Object_Pos* S_OBJ_REMOVE_ACK::_internal_add_pos() {
  return pos_.Add();
}
inline ::Protocol::Object_Pos* S_OBJ_REMOVE_ACK::add_pos() {
  // @@protoc_insertion_point(field_add:Protocol.S_OBJ_REMOVE_ACK.pos)
  return _internal_add_pos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >&
S_OBJ_REMOVE_ACK::pos() const {
  // @@protoc_insertion_point(field_list:Protocol.S_OBJ_REMOVE_ACK.pos)
  return pos_;
}

// -------------------------------------------------------------------

// S_PLAYER_LIST

// uint64 sendTime = 1;
inline void S_PLAYER_LIST::clear_sendtime() {
  sendtime_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_PLAYER_LIST::_internal_sendtime() const {
  return sendtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_PLAYER_LIST::sendtime() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_LIST.sendTime)
  return _internal_sendtime();
}
inline void S_PLAYER_LIST::_internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sendtime_ = value;
}
inline void S_PLAYER_LIST::set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_LIST.sendTime)
}

// uint32 sectorid = 2;
inline void S_PLAYER_LIST::clear_sectorid() {
  sectorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_PLAYER_LIST::_internal_sectorid() const {
  return sectorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_PLAYER_LIST::sectorid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_LIST.sectorid)
  return _internal_sectorid();
}
inline void S_PLAYER_LIST::_internal_set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sectorid_ = value;
}
inline void S_PLAYER_LIST::set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sectorid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_LIST.sectorid)
}

// repeated .Protocol.Object_Pos pos = 3;
inline int S_PLAYER_LIST::_internal_pos_size() const {
  return pos_.size();
}
inline int S_PLAYER_LIST::pos_size() const {
  return _internal_pos_size();
}
inline ::Protocol::Object_Pos* S_PLAYER_LIST::mutable_pos(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAYER_LIST.pos)
  return pos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >*
S_PLAYER_LIST::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_PLAYER_LIST.pos)
  return &pos_;
}
inline const ::Protocol::Object_Pos& S_PLAYER_LIST::_internal_pos(int index) const {
  return pos_.Get(index);
}
inline const ::Protocol::Object_Pos& S_PLAYER_LIST::pos(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_LIST.pos)
  return _internal_pos(index);
}
inline ::Protocol::Object_Pos* S_PLAYER_LIST::_internal_add_pos() {
  return pos_.Add();
}
inline ::Protocol::Object_Pos* S_PLAYER_LIST::add_pos() {
  // @@protoc_insertion_point(field_add:Protocol.S_PLAYER_LIST.pos)
  return _internal_add_pos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >&
S_PLAYER_LIST::pos() const {
  // @@protoc_insertion_point(field_list:Protocol.S_PLAYER_LIST.pos)
  return pos_;
}

// -------------------------------------------------------------------

// S_PLAYER_REMOVE_ACK

// uint64 sendTime = 1;
inline void S_PLAYER_REMOVE_ACK::clear_sendtime() {
  sendtime_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_PLAYER_REMOVE_ACK::_internal_sendtime() const {
  return sendtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_PLAYER_REMOVE_ACK::sendtime() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_REMOVE_ACK.sendTime)
  return _internal_sendtime();
}
inline void S_PLAYER_REMOVE_ACK::_internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sendtime_ = value;
}
inline void S_PLAYER_REMOVE_ACK::set_sendtime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_REMOVE_ACK.sendTime)
}

// uint32 sectorid = 2;
inline void S_PLAYER_REMOVE_ACK::clear_sectorid() {
  sectorid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_PLAYER_REMOVE_ACK::_internal_sectorid() const {
  return sectorid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_PLAYER_REMOVE_ACK::sectorid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_REMOVE_ACK.sectorid)
  return _internal_sectorid();
}
inline void S_PLAYER_REMOVE_ACK::_internal_set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sectorid_ = value;
}
inline void S_PLAYER_REMOVE_ACK::set_sectorid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sectorid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_REMOVE_ACK.sectorid)
}

// repeated .Protocol.Object_Pos pos = 3;
inline int S_PLAYER_REMOVE_ACK::_internal_pos_size() const {
  return pos_.size();
}
inline int S_PLAYER_REMOVE_ACK::pos_size() const {
  return _internal_pos_size();
}
inline ::Protocol::Object_Pos* S_PLAYER_REMOVE_ACK::mutable_pos(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAYER_REMOVE_ACK.pos)
  return pos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >*
S_PLAYER_REMOVE_ACK::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_PLAYER_REMOVE_ACK.pos)
  return &pos_;
}
inline const ::Protocol::Object_Pos& S_PLAYER_REMOVE_ACK::_internal_pos(int index) const {
  return pos_.Get(index);
}
inline const ::Protocol::Object_Pos& S_PLAYER_REMOVE_ACK::pos(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_REMOVE_ACK.pos)
  return _internal_pos(index);
}
inline ::Protocol::Object_Pos* S_PLAYER_REMOVE_ACK::_internal_add_pos() {
  return pos_.Add();
}
inline ::Protocol::Object_Pos* S_PLAYER_REMOVE_ACK::add_pos() {
  // @@protoc_insertion_point(field_add:Protocol.S_PLAYER_REMOVE_ACK.pos)
  return _internal_add_pos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Object_Pos >&
S_PLAYER_REMOVE_ACK::pos() const {
  // @@protoc_insertion_point(field_list:Protocol.S_PLAYER_REMOVE_ACK.pos)
  return pos_;
}

// -------------------------------------------------------------------

// C_CHAT

// string msg = 1;
inline void C_CHAT::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& C_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CHAT.msg)
}
inline std::string* C_CHAT::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_CHAT.msg)
  return _internal_mutable_msg();
}
inline const std::string& C_CHAT::_internal_msg() const {
  return msg_.Get();
}
inline void C_CHAT::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_CHAT::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.C_CHAT.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CHAT.msg)
}

// -------------------------------------------------------------------

// S_CHAT

// uint64 playerId = 1;
inline void S_CHAT::clear_playerid() {
  playerid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_CHAT::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_CHAT::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.playerId)
  return _internal_playerid();
}
inline void S_CHAT::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  playerid_ = value;
}
inline void S_CHAT::set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT.playerId)
}

// string msg = 2;
inline void S_CHAT::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& S_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT.msg)
}
inline std::string* S_CHAT::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHAT.msg)
  return _internal_mutable_msg();
}
inline const std::string& S_CHAT::_internal_msg() const {
  return msg_.Get();
}
inline void S_CHAT::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_CHAT::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.S_CHAT.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CHAT.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
