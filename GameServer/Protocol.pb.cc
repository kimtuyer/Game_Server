// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Protocol {
constexpr C_LOGIN::C_LOGIN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct C_LOGINDefaultTypeInternal {
  constexpr C_LOGINDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_LOGINDefaultTypeInternal() {}
  union {
    C_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
constexpr S_LOGIN::S_LOGIN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_(nullptr)
  , success_(false)
  , zoneid_(0u){}
struct S_LOGINDefaultTypeInternal {
  constexpr S_LOGINDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_LOGINDefaultTypeInternal() {}
  union {
    S_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
constexpr C_ENTER_ZONE::C_ENTER_ZONE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sendtime_(uint64_t{0u})
  , playerid_(uint64_t{0u})
  , zoneid_(0u){}
struct C_ENTER_ZONEDefaultTypeInternal {
  constexpr C_ENTER_ZONEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_ENTER_ZONEDefaultTypeInternal() {}
  union {
    C_ENTER_ZONE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_ENTER_ZONEDefaultTypeInternal _C_ENTER_ZONE_default_instance_;
constexpr S_ENTER_ACK::S_ENTER_ACK(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sendtime_(uint64_t{0u})
  , success_(false)
  , zoneid_(0u){}
struct S_ENTER_ACKDefaultTypeInternal {
  constexpr S_ENTER_ACKDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ENTER_ACKDefaultTypeInternal() {}
  union {
    S_ENTER_ACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ENTER_ACKDefaultTypeInternal _S_ENTER_ACK_default_instance_;
constexpr C_MOVE::C_MOVE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pos_(nullptr)
  , sendtime_(uint64_t{0u})
  , playerid_(uint64_t{0u}){}
struct C_MOVEDefaultTypeInternal {
  constexpr C_MOVEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_MOVEDefaultTypeInternal() {}
  union {
    C_MOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_MOVEDefaultTypeInternal _C_MOVE_default_instance_;
constexpr S_MOVE_ACK::S_MOVE_ACK(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sendtime_(uint64_t{0u})
  , success_(false){}
struct S_MOVE_ACKDefaultTypeInternal {
  constexpr S_MOVE_ACKDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_MOVE_ACKDefaultTypeInternal() {}
  union {
    S_MOVE_ACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_MOVE_ACKDefaultTypeInternal _S_MOVE_ACK_default_instance_;
constexpr C_ATTACK::C_ATTACK(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sendtime_(uint64_t{0u})
  , playerid_(uint64_t{0u}){}
struct C_ATTACKDefaultTypeInternal {
  constexpr C_ATTACKDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_ATTACKDefaultTypeInternal() {}
  union {
    C_ATTACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_ATTACKDefaultTypeInternal _C_ATTACK_default_instance_;
constexpr S_ATTACK_ACK::S_ATTACK_ACK(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sendtime_(uint64_t{0u})
  , success_(false){}
struct S_ATTACK_ACKDefaultTypeInternal {
  constexpr S_ATTACK_ACKDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ATTACK_ACKDefaultTypeInternal() {}
  union {
    S_ATTACK_ACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ATTACK_ACKDefaultTypeInternal _S_ATTACK_ACK_default_instance_;
constexpr S_OBJ_LIST::S_OBJ_LIST(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sendtime_(uint64_t{0u})
  , success_(false){}
struct S_OBJ_LISTDefaultTypeInternal {
  constexpr S_OBJ_LISTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_OBJ_LISTDefaultTypeInternal() {}
  union {
    S_OBJ_LIST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_OBJ_LISTDefaultTypeInternal _S_OBJ_LIST_default_instance_;
constexpr S_OBJ_REMOVE_ACK::S_OBJ_REMOVE_ACK(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sendtime_(uint64_t{0u})
  , success_(false){}
struct S_OBJ_REMOVE_ACKDefaultTypeInternal {
  constexpr S_OBJ_REMOVE_ACKDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_OBJ_REMOVE_ACKDefaultTypeInternal() {}
  union {
    S_OBJ_REMOVE_ACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_OBJ_REMOVE_ACKDefaultTypeInternal _S_OBJ_REMOVE_ACK_default_instance_;
constexpr C_CHAT::C_CHAT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct C_CHATDefaultTypeInternal {
  constexpr C_CHATDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C_CHATDefaultTypeInternal() {}
  union {
    C_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C_CHATDefaultTypeInternal _C_CHAT_default_instance_;
constexpr S_CHAT::S_CHAT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , playerid_(uint64_t{0u}){}
struct S_CHATDefaultTypeInternal {
  constexpr S_CHATDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CHATDefaultTypeInternal() {}
  union {
    S_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CHATDefaultTypeInternal _S_CHAT_default_instance_;
}  // namespace Protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Protocol_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Protocol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, zoneid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_ZONE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_ZONE, sendtime_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_ZONE, playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_ZONE, zoneid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_ACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_ACK, sendtime_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_ACK, success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_ACK, zoneid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MOVE, sendtime_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MOVE, playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MOVE, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVE_ACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVE_ACK, sendtime_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVE_ACK, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ATTACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ATTACK, sendtime_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ATTACK, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ATTACK_ACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ATTACK_ACK, sendtime_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ATTACK_ACK, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OBJ_LIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OBJ_LIST, sendtime_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OBJ_LIST, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OBJ_REMOVE_ACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OBJ_REMOVE_ACK, sendtime_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OBJ_REMOVE_ACK, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Protocol::C_LOGIN)},
  { 5, -1, sizeof(::Protocol::S_LOGIN)},
  { 13, -1, sizeof(::Protocol::C_ENTER_ZONE)},
  { 21, -1, sizeof(::Protocol::S_ENTER_ACK)},
  { 29, -1, sizeof(::Protocol::C_MOVE)},
  { 37, -1, sizeof(::Protocol::S_MOVE_ACK)},
  { 44, -1, sizeof(::Protocol::C_ATTACK)},
  { 51, -1, sizeof(::Protocol::S_ATTACK_ACK)},
  { 58, -1, sizeof(::Protocol::S_OBJ_LIST)},
  { 65, -1, sizeof(::Protocol::S_OBJ_REMOVE_ACK)},
  { 72, -1, sizeof(::Protocol::C_CHAT)},
  { 78, -1, sizeof(::Protocol::S_CHAT)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_ENTER_ZONE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_ENTER_ACK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_MOVE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_MOVE_ACK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_ATTACK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_ATTACK_ACK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_OBJ_LIST_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_OBJ_REMOVE_ACK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_C_CHAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_CHAT_default_instance_),
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\032\nEnum.proto\032\014"
  "Struct.proto\"\t\n\007C_LOGIN\"M\n\007S_LOGIN\022\017\n\007su"
  "ccess\030\001 \001(\010\022\016\n\006zoneid\030\002 \001(\r\022!\n\007players\030\003"
  " \001(\0132\020.Protocol.Player\"B\n\014C_ENTER_ZONE\022\020"
  "\n\010sendTime\030\001 \001(\004\022\020\n\010playerID\030\002 \001(\004\022\016\n\006zo"
  "neid\030\003 \001(\r\"@\n\013S_ENTER_ACK\022\020\n\010sendTime\030\001 "
  "\001(\004\022\017\n\007success\030\002 \001(\010\022\016\n\006zoneID\030\003 \001(\r\"N\n\006"
  "C_MOVE\022\020\n\010sendTime\030\001 \001(\004\022\020\n\010playerID\030\002 \001"
  "(\004\022 \n\003pos\030\003 \001(\0132\023.Protocol.D3DVECTOR\"/\n\n"
  "S_MOVE_ACK\022\020\n\010sendTime\030\001 \001(\004\022\017\n\007success\030"
  "\002 \001(\010\".\n\010C_ATTACK\022\020\n\010sendTime\030\001 \001(\004\022\020\n\010p"
  "layerID\030\002 \001(\004\"1\n\014S_ATTACK_ACK\022\020\n\010sendTim"
  "e\030\001 \001(\004\022\017\n\007success\030\002 \001(\010\"/\n\nS_OBJ_LIST\022\020"
  "\n\010sendTime\030\001 \001(\004\022\017\n\007success\030\002 \001(\010\"5\n\020S_O"
  "BJ_REMOVE_ACK\022\020\n\010sendTime\030\001 \001(\004\022\017\n\007succe"
  "ss\030\002 \001(\010\"\025\n\006C_CHAT\022\013\n\003msg\030\001 \001(\t\"\'\n\006S_CHA"
  "T\022\020\n\010playerId\030\001 \001(\004\022\013\n\003msg\030\002 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Protocol_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Protocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto = {
  false, false, 680, descriptor_table_protodef_Protocol_2eproto, "Protocol.proto", 
  &descriptor_table_Protocol_2eproto_once, descriptor_table_Protocol_2eproto_deps, 2, 12,
  schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
  file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto, file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {

// ===================================================================

class C_LOGIN::_Internal {
 public:
};

C_LOGIN::C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LOGIN)
}
C_LOGIN::C_LOGIN(const C_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LOGIN)
}

void C_LOGIN::SharedCtor() {
}

C_LOGIN::~C_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.C_LOGIN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_LOGIN::ArenaDtor(void* object) {
  C_LOGIN* _this = reinterpret_cast< C_LOGIN* >(object);
  (void)_this;
}
void C_LOGIN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_LOGIN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_LOGIN)
  return target;
}

size_t C_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_LOGIN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_LOGIN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  const C_LOGIN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_LOGIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_LOGIN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_LOGIN)
    MergeFrom(*source);
  }
}

void C_LOGIN::MergeFrom(const C_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void C_LOGIN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_LOGIN::CopyFrom(const C_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_LOGIN::IsInitialized() const {
  return true;
}

void C_LOGIN::InternalSwap(C_LOGIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_LOGIN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class S_LOGIN::_Internal {
 public:
  static const ::Protocol::Player& players(const S_LOGIN* msg);
};

const ::Protocol::Player&
S_LOGIN::_Internal::players(const S_LOGIN* msg) {
  return *msg->players_;
}
void S_LOGIN::clear_players() {
  if (GetArenaForAllocation() == nullptr && players_ != nullptr) {
    delete players_;
  }
  players_ = nullptr;
}
S_LOGIN::S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LOGIN)
}
S_LOGIN::S_LOGIN(const S_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_players()) {
    players_ = new ::Protocol::Player(*from.players_);
  } else {
    players_ = nullptr;
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&zoneid_) -
    reinterpret_cast<char*>(&success_)) + sizeof(zoneid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LOGIN)
}

void S_LOGIN::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&players_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&zoneid_) -
    reinterpret_cast<char*>(&players_)) + sizeof(zoneid_));
}

S_LOGIN::~S_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.S_LOGIN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete players_;
}

void S_LOGIN::ArenaDtor(void* object) {
  S_LOGIN* _this = reinterpret_cast< S_LOGIN* >(object);
  (void)_this;
}
void S_LOGIN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && players_ != nullptr) {
    delete players_;
  }
  players_ = nullptr;
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoneid_) -
      reinterpret_cast<char*>(&success_)) + sizeof(zoneid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 zoneid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          zoneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.Player players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_players(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_LOGIN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // uint32 zoneid = 2;
  if (this->zoneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_zoneid(), target);
  }

  // .Protocol.Player players = 3;
  if (this->has_players()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::players(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LOGIN)
  return target;
}

size_t S_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LOGIN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player players = 3;
  if (this->has_players()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *players_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 zoneid = 2;
  if (this->zoneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_zoneid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_LOGIN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  const S_LOGIN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_LOGIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_LOGIN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_LOGIN)
    MergeFrom(*source);
  }
}

void S_LOGIN::MergeFrom(const S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_players()) {
    _internal_mutable_players()->::Protocol::Player::MergeFrom(from._internal_players());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.zoneid() != 0) {
    _internal_set_zoneid(from._internal_zoneid());
  }
}

void S_LOGIN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_LOGIN::CopyFrom(const S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LOGIN::IsInitialized() const {
  return true;
}

void S_LOGIN::InternalSwap(S_LOGIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_LOGIN, zoneid_)
      + sizeof(S_LOGIN::zoneid_)
      - PROTOBUF_FIELD_OFFSET(S_LOGIN, players_)>(
          reinterpret_cast<char*>(&players_),
          reinterpret_cast<char*>(&other->players_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LOGIN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class C_ENTER_ZONE::_Internal {
 public:
};

C_ENTER_ZONE::C_ENTER_ZONE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ENTER_ZONE)
}
C_ENTER_ZONE::C_ENTER_ZONE(const C_ENTER_ZONE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sendtime_, &from.sendtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&zoneid_) -
    reinterpret_cast<char*>(&sendtime_)) + sizeof(zoneid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ENTER_ZONE)
}

void C_ENTER_ZONE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sendtime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&zoneid_) -
    reinterpret_cast<char*>(&sendtime_)) + sizeof(zoneid_));
}

C_ENTER_ZONE::~C_ENTER_ZONE() {
  // @@protoc_insertion_point(destructor:Protocol.C_ENTER_ZONE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_ENTER_ZONE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ENTER_ZONE::ArenaDtor(void* object) {
  C_ENTER_ZONE* _this = reinterpret_cast< C_ENTER_ZONE* >(object);
  (void)_this;
}
void C_ENTER_ZONE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_ENTER_ZONE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ENTER_ZONE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ENTER_ZONE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sendtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoneid_) -
      reinterpret_cast<char*>(&sendtime_)) + sizeof(zoneid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ENTER_ZONE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 sendTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 playerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 zoneid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          zoneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_ENTER_ZONE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ENTER_ZONE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sendTime = 1;
  if (this->sendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sendtime(), target);
  }

  // uint64 playerID = 2;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_playerid(), target);
  }

  // uint32 zoneid = 3;
  if (this->zoneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_zoneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ENTER_ZONE)
  return target;
}

size_t C_ENTER_ZONE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ENTER_ZONE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sendTime = 1;
  if (this->sendtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sendtime());
  }

  // uint64 playerID = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_playerid());
  }

  // uint32 zoneid = 3;
  if (this->zoneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_zoneid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_ENTER_ZONE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_ENTER_ZONE)
  GOOGLE_DCHECK_NE(&from, this);
  const C_ENTER_ZONE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_ENTER_ZONE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_ENTER_ZONE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_ENTER_ZONE)
    MergeFrom(*source);
  }
}

void C_ENTER_ZONE::MergeFrom(const C_ENTER_ZONE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ENTER_ZONE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sendtime() != 0) {
    _internal_set_sendtime(from._internal_sendtime());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.zoneid() != 0) {
    _internal_set_zoneid(from._internal_zoneid());
  }
}

void C_ENTER_ZONE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_ENTER_ZONE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_ENTER_ZONE::CopyFrom(const C_ENTER_ZONE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ENTER_ZONE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ENTER_ZONE::IsInitialized() const {
  return true;
}

void C_ENTER_ZONE::InternalSwap(C_ENTER_ZONE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_ENTER_ZONE, zoneid_)
      + sizeof(C_ENTER_ZONE::zoneid_)
      - PROTOBUF_FIELD_OFFSET(C_ENTER_ZONE, sendtime_)>(
          reinterpret_cast<char*>(&sendtime_),
          reinterpret_cast<char*>(&other->sendtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ENTER_ZONE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class S_ENTER_ACK::_Internal {
 public:
};

S_ENTER_ACK::S_ENTER_ACK(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ENTER_ACK)
}
S_ENTER_ACK::S_ENTER_ACK(const S_ENTER_ACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sendtime_, &from.sendtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&zoneid_) -
    reinterpret_cast<char*>(&sendtime_)) + sizeof(zoneid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ENTER_ACK)
}

void S_ENTER_ACK::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sendtime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&zoneid_) -
    reinterpret_cast<char*>(&sendtime_)) + sizeof(zoneid_));
}

S_ENTER_ACK::~S_ENTER_ACK() {
  // @@protoc_insertion_point(destructor:Protocol.S_ENTER_ACK)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_ENTER_ACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ENTER_ACK::ArenaDtor(void* object) {
  S_ENTER_ACK* _this = reinterpret_cast< S_ENTER_ACK* >(object);
  (void)_this;
}
void S_ENTER_ACK::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ENTER_ACK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ENTER_ACK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ENTER_ACK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sendtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoneid_) -
      reinterpret_cast<char*>(&sendtime_)) + sizeof(zoneid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ENTER_ACK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 sendTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 zoneID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          zoneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_ENTER_ACK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ENTER_ACK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sendTime = 1;
  if (this->sendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sendtime(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // uint32 zoneID = 3;
  if (this->zoneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_zoneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ENTER_ACK)
  return target;
}

size_t S_ENTER_ACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ENTER_ACK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sendTime = 1;
  if (this->sendtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sendtime());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 zoneID = 3;
  if (this->zoneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_zoneid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_ENTER_ACK::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_ENTER_ACK)
  GOOGLE_DCHECK_NE(&from, this);
  const S_ENTER_ACK* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_ENTER_ACK>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_ENTER_ACK)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_ENTER_ACK)
    MergeFrom(*source);
  }
}

void S_ENTER_ACK::MergeFrom(const S_ENTER_ACK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ENTER_ACK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sendtime() != 0) {
    _internal_set_sendtime(from._internal_sendtime());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.zoneid() != 0) {
    _internal_set_zoneid(from._internal_zoneid());
  }
}

void S_ENTER_ACK::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_ENTER_ACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_ENTER_ACK::CopyFrom(const S_ENTER_ACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ENTER_ACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ENTER_ACK::IsInitialized() const {
  return true;
}

void S_ENTER_ACK::InternalSwap(S_ENTER_ACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ENTER_ACK, zoneid_)
      + sizeof(S_ENTER_ACK::zoneid_)
      - PROTOBUF_FIELD_OFFSET(S_ENTER_ACK, sendtime_)>(
          reinterpret_cast<char*>(&sendtime_),
          reinterpret_cast<char*>(&other->sendtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ENTER_ACK::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class C_MOVE::_Internal {
 public:
  static const ::Protocol::D3DVECTOR& pos(const C_MOVE* msg);
};

const ::Protocol::D3DVECTOR&
C_MOVE::_Internal::pos(const C_MOVE* msg) {
  return *msg->pos_;
}
void C_MOVE::clear_pos() {
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
C_MOVE::C_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_MOVE)
}
C_MOVE::C_MOVE(const C_MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::Protocol::D3DVECTOR(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&sendtime_, &from.sendtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&sendtime_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_MOVE)
}

void C_MOVE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(playerid_));
}

C_MOVE::~C_MOVE() {
  // @@protoc_insertion_point(destructor:Protocol.C_MOVE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_MOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pos_;
}

void C_MOVE::ArenaDtor(void* object) {
  C_MOVE* _this = reinterpret_cast< C_MOVE* >(object);
  (void)_this;
}
void C_MOVE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_MOVE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_MOVE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&sendtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&sendtime_)) + sizeof(playerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_MOVE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 sendTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 playerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.D3DVECTOR pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_MOVE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_MOVE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sendTime = 1;
  if (this->sendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sendtime(), target);
  }

  // uint64 playerID = 2;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_playerid(), target);
  }

  // .Protocol.D3DVECTOR pos = 3;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_MOVE)
  return target;
}

size_t C_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_MOVE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.D3DVECTOR pos = 3;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // uint64 sendTime = 1;
  if (this->sendtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sendtime());
  }

  // uint64 playerID = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_MOVE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_MOVE)
  GOOGLE_DCHECK_NE(&from, this);
  const C_MOVE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_MOVE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_MOVE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_MOVE)
    MergeFrom(*source);
  }
}

void C_MOVE::MergeFrom(const C_MOVE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_MOVE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::Protocol::D3DVECTOR::MergeFrom(from._internal_pos());
  }
  if (from.sendtime() != 0) {
    _internal_set_sendtime(from._internal_sendtime());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void C_MOVE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_MOVE::CopyFrom(const C_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_MOVE::IsInitialized() const {
  return true;
}

void C_MOVE::InternalSwap(C_MOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_MOVE, playerid_)
      + sizeof(C_MOVE::playerid_)
      - PROTOBUF_FIELD_OFFSET(C_MOVE, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_MOVE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class S_MOVE_ACK::_Internal {
 public:
};

S_MOVE_ACK::S_MOVE_ACK(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_MOVE_ACK)
}
S_MOVE_ACK::S_MOVE_ACK(const S_MOVE_ACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sendtime_, &from.sendtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&sendtime_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_MOVE_ACK)
}

void S_MOVE_ACK::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sendtime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&sendtime_)) + sizeof(success_));
}

S_MOVE_ACK::~S_MOVE_ACK() {
  // @@protoc_insertion_point(destructor:Protocol.S_MOVE_ACK)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_MOVE_ACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_MOVE_ACK::ArenaDtor(void* object) {
  S_MOVE_ACK* _this = reinterpret_cast< S_MOVE_ACK* >(object);
  (void)_this;
}
void S_MOVE_ACK::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_MOVE_ACK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_MOVE_ACK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_MOVE_ACK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sendtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&sendtime_)) + sizeof(success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MOVE_ACK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 sendTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_MOVE_ACK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_MOVE_ACK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sendTime = 1;
  if (this->sendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sendtime(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_MOVE_ACK)
  return target;
}

size_t S_MOVE_ACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_MOVE_ACK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sendTime = 1;
  if (this->sendtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sendtime());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_MOVE_ACK::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_MOVE_ACK)
  GOOGLE_DCHECK_NE(&from, this);
  const S_MOVE_ACK* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_MOVE_ACK>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_MOVE_ACK)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_MOVE_ACK)
    MergeFrom(*source);
  }
}

void S_MOVE_ACK::MergeFrom(const S_MOVE_ACK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_MOVE_ACK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sendtime() != 0) {
    _internal_set_sendtime(from._internal_sendtime());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void S_MOVE_ACK::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_MOVE_ACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_MOVE_ACK::CopyFrom(const S_MOVE_ACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_MOVE_ACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MOVE_ACK::IsInitialized() const {
  return true;
}

void S_MOVE_ACK::InternalSwap(S_MOVE_ACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_MOVE_ACK, success_)
      + sizeof(S_MOVE_ACK::success_)
      - PROTOBUF_FIELD_OFFSET(S_MOVE_ACK, sendtime_)>(
          reinterpret_cast<char*>(&sendtime_),
          reinterpret_cast<char*>(&other->sendtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MOVE_ACK::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class C_ATTACK::_Internal {
 public:
};

C_ATTACK::C_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ATTACK)
}
C_ATTACK::C_ATTACK(const C_ATTACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sendtime_, &from.sendtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&sendtime_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ATTACK)
}

void C_ATTACK::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sendtime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&sendtime_)) + sizeof(playerid_));
}

C_ATTACK::~C_ATTACK() {
  // @@protoc_insertion_point(destructor:Protocol.C_ATTACK)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_ATTACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ATTACK::ArenaDtor(void* object) {
  C_ATTACK* _this = reinterpret_cast< C_ATTACK* >(object);
  (void)_this;
}
void C_ATTACK::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_ATTACK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ATTACK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ATTACK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sendtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&sendtime_)) + sizeof(playerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ATTACK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 sendTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 playerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_ATTACK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ATTACK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sendTime = 1;
  if (this->sendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sendtime(), target);
  }

  // uint64 playerID = 2;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ATTACK)
  return target;
}

size_t C_ATTACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ATTACK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sendTime = 1;
  if (this->sendtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sendtime());
  }

  // uint64 playerID = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_ATTACK::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_ATTACK)
  GOOGLE_DCHECK_NE(&from, this);
  const C_ATTACK* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_ATTACK>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_ATTACK)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_ATTACK)
    MergeFrom(*source);
  }
}

void C_ATTACK::MergeFrom(const C_ATTACK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ATTACK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sendtime() != 0) {
    _internal_set_sendtime(from._internal_sendtime());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void C_ATTACK::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_ATTACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_ATTACK::CopyFrom(const C_ATTACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ATTACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ATTACK::IsInitialized() const {
  return true;
}

void C_ATTACK::InternalSwap(C_ATTACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_ATTACK, playerid_)
      + sizeof(C_ATTACK::playerid_)
      - PROTOBUF_FIELD_OFFSET(C_ATTACK, sendtime_)>(
          reinterpret_cast<char*>(&sendtime_),
          reinterpret_cast<char*>(&other->sendtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ATTACK::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class S_ATTACK_ACK::_Internal {
 public:
};

S_ATTACK_ACK::S_ATTACK_ACK(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ATTACK_ACK)
}
S_ATTACK_ACK::S_ATTACK_ACK(const S_ATTACK_ACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sendtime_, &from.sendtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&sendtime_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ATTACK_ACK)
}

void S_ATTACK_ACK::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sendtime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&sendtime_)) + sizeof(success_));
}

S_ATTACK_ACK::~S_ATTACK_ACK() {
  // @@protoc_insertion_point(destructor:Protocol.S_ATTACK_ACK)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_ATTACK_ACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ATTACK_ACK::ArenaDtor(void* object) {
  S_ATTACK_ACK* _this = reinterpret_cast< S_ATTACK_ACK* >(object);
  (void)_this;
}
void S_ATTACK_ACK::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ATTACK_ACK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ATTACK_ACK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ATTACK_ACK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sendtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&sendtime_)) + sizeof(success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ATTACK_ACK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 sendTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_ATTACK_ACK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ATTACK_ACK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sendTime = 1;
  if (this->sendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sendtime(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ATTACK_ACK)
  return target;
}

size_t S_ATTACK_ACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ATTACK_ACK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sendTime = 1;
  if (this->sendtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sendtime());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_ATTACK_ACK::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_ATTACK_ACK)
  GOOGLE_DCHECK_NE(&from, this);
  const S_ATTACK_ACK* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_ATTACK_ACK>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_ATTACK_ACK)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_ATTACK_ACK)
    MergeFrom(*source);
  }
}

void S_ATTACK_ACK::MergeFrom(const S_ATTACK_ACK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ATTACK_ACK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sendtime() != 0) {
    _internal_set_sendtime(from._internal_sendtime());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void S_ATTACK_ACK::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_ATTACK_ACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_ATTACK_ACK::CopyFrom(const S_ATTACK_ACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ATTACK_ACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ATTACK_ACK::IsInitialized() const {
  return true;
}

void S_ATTACK_ACK::InternalSwap(S_ATTACK_ACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ATTACK_ACK, success_)
      + sizeof(S_ATTACK_ACK::success_)
      - PROTOBUF_FIELD_OFFSET(S_ATTACK_ACK, sendtime_)>(
          reinterpret_cast<char*>(&sendtime_),
          reinterpret_cast<char*>(&other->sendtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ATTACK_ACK::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// ===================================================================

class S_OBJ_LIST::_Internal {
 public:
};

S_OBJ_LIST::S_OBJ_LIST(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_OBJ_LIST)
}
S_OBJ_LIST::S_OBJ_LIST(const S_OBJ_LIST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sendtime_, &from.sendtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&sendtime_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_OBJ_LIST)
}

void S_OBJ_LIST::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sendtime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&sendtime_)) + sizeof(success_));
}

S_OBJ_LIST::~S_OBJ_LIST() {
  // @@protoc_insertion_point(destructor:Protocol.S_OBJ_LIST)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_OBJ_LIST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_OBJ_LIST::ArenaDtor(void* object) {
  S_OBJ_LIST* _this = reinterpret_cast< S_OBJ_LIST* >(object);
  (void)_this;
}
void S_OBJ_LIST::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_OBJ_LIST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_OBJ_LIST::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_OBJ_LIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sendtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&sendtime_)) + sizeof(success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_OBJ_LIST::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 sendTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_OBJ_LIST::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_OBJ_LIST)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sendTime = 1;
  if (this->sendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sendtime(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_OBJ_LIST)
  return target;
}

size_t S_OBJ_LIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_OBJ_LIST)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sendTime = 1;
  if (this->sendtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sendtime());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_OBJ_LIST::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_OBJ_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  const S_OBJ_LIST* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_OBJ_LIST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_OBJ_LIST)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_OBJ_LIST)
    MergeFrom(*source);
  }
}

void S_OBJ_LIST::MergeFrom(const S_OBJ_LIST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_OBJ_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sendtime() != 0) {
    _internal_set_sendtime(from._internal_sendtime());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void S_OBJ_LIST::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_OBJ_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_OBJ_LIST::CopyFrom(const S_OBJ_LIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_OBJ_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_OBJ_LIST::IsInitialized() const {
  return true;
}

void S_OBJ_LIST::InternalSwap(S_OBJ_LIST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_OBJ_LIST, success_)
      + sizeof(S_OBJ_LIST::success_)
      - PROTOBUF_FIELD_OFFSET(S_OBJ_LIST, sendtime_)>(
          reinterpret_cast<char*>(&sendtime_),
          reinterpret_cast<char*>(&other->sendtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_OBJ_LIST::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}

// ===================================================================

class S_OBJ_REMOVE_ACK::_Internal {
 public:
};

S_OBJ_REMOVE_ACK::S_OBJ_REMOVE_ACK(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_OBJ_REMOVE_ACK)
}
S_OBJ_REMOVE_ACK::S_OBJ_REMOVE_ACK(const S_OBJ_REMOVE_ACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sendtime_, &from.sendtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&sendtime_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_OBJ_REMOVE_ACK)
}

void S_OBJ_REMOVE_ACK::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sendtime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&sendtime_)) + sizeof(success_));
}

S_OBJ_REMOVE_ACK::~S_OBJ_REMOVE_ACK() {
  // @@protoc_insertion_point(destructor:Protocol.S_OBJ_REMOVE_ACK)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_OBJ_REMOVE_ACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_OBJ_REMOVE_ACK::ArenaDtor(void* object) {
  S_OBJ_REMOVE_ACK* _this = reinterpret_cast< S_OBJ_REMOVE_ACK* >(object);
  (void)_this;
}
void S_OBJ_REMOVE_ACK::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_OBJ_REMOVE_ACK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_OBJ_REMOVE_ACK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_OBJ_REMOVE_ACK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sendtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&sendtime_)) + sizeof(success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_OBJ_REMOVE_ACK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 sendTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_OBJ_REMOVE_ACK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_OBJ_REMOVE_ACK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sendTime = 1;
  if (this->sendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sendtime(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_OBJ_REMOVE_ACK)
  return target;
}

size_t S_OBJ_REMOVE_ACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_OBJ_REMOVE_ACK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sendTime = 1;
  if (this->sendtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sendtime());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_OBJ_REMOVE_ACK::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_OBJ_REMOVE_ACK)
  GOOGLE_DCHECK_NE(&from, this);
  const S_OBJ_REMOVE_ACK* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_OBJ_REMOVE_ACK>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_OBJ_REMOVE_ACK)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_OBJ_REMOVE_ACK)
    MergeFrom(*source);
  }
}

void S_OBJ_REMOVE_ACK::MergeFrom(const S_OBJ_REMOVE_ACK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_OBJ_REMOVE_ACK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sendtime() != 0) {
    _internal_set_sendtime(from._internal_sendtime());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void S_OBJ_REMOVE_ACK::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_OBJ_REMOVE_ACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_OBJ_REMOVE_ACK::CopyFrom(const S_OBJ_REMOVE_ACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_OBJ_REMOVE_ACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_OBJ_REMOVE_ACK::IsInitialized() const {
  return true;
}

void S_OBJ_REMOVE_ACK::InternalSwap(S_OBJ_REMOVE_ACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_OBJ_REMOVE_ACK, success_)
      + sizeof(S_OBJ_REMOVE_ACK::success_)
      - PROTOBUF_FIELD_OFFSET(S_OBJ_REMOVE_ACK, sendtime_)>(
          reinterpret_cast<char*>(&sendtime_),
          reinterpret_cast<char*>(&other->sendtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_OBJ_REMOVE_ACK::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[9]);
}

// ===================================================================

class C_CHAT::_Internal {
 public:
};

C_CHAT::C_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CHAT)
}
C_CHAT::C_CHAT(const C_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CHAT)
}

void C_CHAT::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

C_CHAT::~C_CHAT() {
  // @@protoc_insertion_point(destructor:Protocol.C_CHAT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C_CHAT::ArenaDtor(void* object) {
  C_CHAT* _this = reinterpret_cast< C_CHAT* >(object);
  (void)_this;
}
void C_CHAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C_CHAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CHAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CHAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.C_CHAT.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_CHAT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CHAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_CHAT.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CHAT)
  return target;
}

size_t C_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CHAT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_CHAT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.C_CHAT)
  GOOGLE_DCHECK_NE(&from, this);
  const C_CHAT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_CHAT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.C_CHAT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.C_CHAT)
    MergeFrom(*source);
  }
}

void C_CHAT::MergeFrom(const C_CHAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CHAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
}

void C_CHAT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.C_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_CHAT::CopyFrom(const C_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CHAT::IsInitialized() const {
  return true;
}

void C_CHAT::InternalSwap(C_CHAT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CHAT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[10]);
}

// ===================================================================

class S_CHAT::_Internal {
 public:
};

S_CHAT::S_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHAT)
}
S_CHAT::S_CHAT(const S_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHAT)
}

void S_CHAT::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
playerid_ = uint64_t{0u};
}

S_CHAT::~S_CHAT() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHAT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S_CHAT::ArenaDtor(void* object) {
  S_CHAT* _this = reinterpret_cast< S_CHAT* >(object);
  (void)_this;
}
void S_CHAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CHAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  playerid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.S_CHAT.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_CHAT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_playerid(), target);
  }

  // string msg = 2;
  if (!this->msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CHAT.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHAT)
  return target;
}

size_t S_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHAT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // uint64 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_CHAT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_CHAT)
  GOOGLE_DCHECK_NE(&from, this);
  const S_CHAT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_CHAT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_CHAT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_CHAT)
    MergeFrom(*source);
  }
}

void S_CHAT::MergeFrom(const S_CHAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void S_CHAT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_CHAT::CopyFrom(const S_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHAT::IsInitialized() const {
  return true;
}

void S_CHAT::InternalSwap(S_CHAT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHAT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::C_LOGIN* Arena::CreateMaybeMessage< ::Protocol::C_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LOGIN* Arena::CreateMaybeMessage< ::Protocol::S_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ENTER_ZONE* Arena::CreateMaybeMessage< ::Protocol::C_ENTER_ZONE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ENTER_ZONE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ENTER_ACK* Arena::CreateMaybeMessage< ::Protocol::S_ENTER_ACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ENTER_ACK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_MOVE* Arena::CreateMaybeMessage< ::Protocol::C_MOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_MOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_MOVE_ACK* Arena::CreateMaybeMessage< ::Protocol::S_MOVE_ACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_MOVE_ACK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ATTACK* Arena::CreateMaybeMessage< ::Protocol::C_ATTACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ATTACK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ATTACK_ACK* Arena::CreateMaybeMessage< ::Protocol::S_ATTACK_ACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ATTACK_ACK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_OBJ_LIST* Arena::CreateMaybeMessage< ::Protocol::S_OBJ_LIST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_OBJ_LIST >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_OBJ_REMOVE_ACK* Arena::CreateMaybeMessage< ::Protocol::S_OBJ_REMOVE_ACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_OBJ_REMOVE_ACK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CHAT* Arena::CreateMaybeMessage< ::Protocol::C_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHAT* Arena::CreateMaybeMessage< ::Protocol::S_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHAT >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
